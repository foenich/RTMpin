
JD_Node_2_401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd0  08004194  08004194  00004194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08007f64  08007f64  00007f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f94  08007f94  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f94  08007f94  00007f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f9c  08007f9c  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f9c  08007f9c  00007f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa0  08007fa0  00007fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007fa4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08007fb0  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08007fb0  00010178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c9b  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc1  00000000  00000000  00018cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0001a998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0001b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017856  00000000  00000000  0001be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000903b  00000000  00000000  000336d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f161  00000000  00000000  0003c711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb872  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd4  00000000  00000000  000cb8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004194 <__do_global_dtors_aux>:
 8004194:	b510      	push	{r4, lr}
 8004196:	4c05      	ldr	r4, [pc, #20]	; (80041ac <__do_global_dtors_aux+0x18>)
 8004198:	7823      	ldrb	r3, [r4, #0]
 800419a:	b933      	cbnz	r3, 80041aa <__do_global_dtors_aux+0x16>
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x1c>)
 800419e:	b113      	cbz	r3, 80041a6 <__do_global_dtors_aux+0x12>
 80041a0:	4804      	ldr	r0, [pc, #16]	; (80041b4 <__do_global_dtors_aux+0x20>)
 80041a2:	f3af 8000 	nop.w
 80041a6:	2301      	movs	r3, #1
 80041a8:	7023      	strb	r3, [r4, #0]
 80041aa:	bd10      	pop	{r4, pc}
 80041ac:	2000000c 	.word	0x2000000c
 80041b0:	00000000 	.word	0x00000000
 80041b4:	08007f4c 	.word	0x08007f4c

080041b8 <frame_dummy>:
 80041b8:	b508      	push	{r3, lr}
 80041ba:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <frame_dummy+0x10>)
 80041bc:	b11b      	cbz	r3, 80041c6 <frame_dummy+0xe>
 80041be:	4903      	ldr	r1, [pc, #12]	; (80041cc <frame_dummy+0x14>)
 80041c0:	4803      	ldr	r0, [pc, #12]	; (80041d0 <frame_dummy+0x18>)
 80041c2:	f3af 8000 	nop.w
 80041c6:	bd08      	pop	{r3, pc}
 80041c8:	00000000 	.word	0x00000000
 80041cc:	20000010 	.word	0x20000010
 80041d0:	08007f4c 	.word	0x08007f4c

080041d4 <__aeabi_uldivmod>:
 80041d4:	b953      	cbnz	r3, 80041ec <__aeabi_uldivmod+0x18>
 80041d6:	b94a      	cbnz	r2, 80041ec <__aeabi_uldivmod+0x18>
 80041d8:	2900      	cmp	r1, #0
 80041da:	bf08      	it	eq
 80041dc:	2800      	cmpeq	r0, #0
 80041de:	bf1c      	itt	ne
 80041e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80041e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80041e8:	f000 b96e 	b.w	80044c8 <__aeabi_idiv0>
 80041ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80041f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80041f4:	f000 f806 	bl	8004204 <__udivmoddi4>
 80041f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80041fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004200:	b004      	add	sp, #16
 8004202:	4770      	bx	lr

08004204 <__udivmoddi4>:
 8004204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004208:	9d08      	ldr	r5, [sp, #32]
 800420a:	4604      	mov	r4, r0
 800420c:	468c      	mov	ip, r1
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 8083 	bne.w	800431a <__udivmoddi4+0x116>
 8004214:	428a      	cmp	r2, r1
 8004216:	4617      	mov	r7, r2
 8004218:	d947      	bls.n	80042aa <__udivmoddi4+0xa6>
 800421a:	fab2 f282 	clz	r2, r2
 800421e:	b142      	cbz	r2, 8004232 <__udivmoddi4+0x2e>
 8004220:	f1c2 0020 	rsb	r0, r2, #32
 8004224:	fa24 f000 	lsr.w	r0, r4, r0
 8004228:	4091      	lsls	r1, r2
 800422a:	4097      	lsls	r7, r2
 800422c:	ea40 0c01 	orr.w	ip, r0, r1
 8004230:	4094      	lsls	r4, r2
 8004232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8004236:	0c23      	lsrs	r3, r4, #16
 8004238:	fbbc f6f8 	udiv	r6, ip, r8
 800423c:	fa1f fe87 	uxth.w	lr, r7
 8004240:	fb08 c116 	mls	r1, r8, r6, ip
 8004244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004248:	fb06 f10e 	mul.w	r1, r6, lr
 800424c:	4299      	cmp	r1, r3
 800424e:	d909      	bls.n	8004264 <__udivmoddi4+0x60>
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8004256:	f080 8119 	bcs.w	800448c <__udivmoddi4+0x288>
 800425a:	4299      	cmp	r1, r3
 800425c:	f240 8116 	bls.w	800448c <__udivmoddi4+0x288>
 8004260:	3e02      	subs	r6, #2
 8004262:	443b      	add	r3, r7
 8004264:	1a5b      	subs	r3, r3, r1
 8004266:	b2a4      	uxth	r4, r4
 8004268:	fbb3 f0f8 	udiv	r0, r3, r8
 800426c:	fb08 3310 	mls	r3, r8, r0, r3
 8004270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004274:	fb00 fe0e 	mul.w	lr, r0, lr
 8004278:	45a6      	cmp	lr, r4
 800427a:	d909      	bls.n	8004290 <__udivmoddi4+0x8c>
 800427c:	193c      	adds	r4, r7, r4
 800427e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004282:	f080 8105 	bcs.w	8004490 <__udivmoddi4+0x28c>
 8004286:	45a6      	cmp	lr, r4
 8004288:	f240 8102 	bls.w	8004490 <__udivmoddi4+0x28c>
 800428c:	3802      	subs	r0, #2
 800428e:	443c      	add	r4, r7
 8004290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004294:	eba4 040e 	sub.w	r4, r4, lr
 8004298:	2600      	movs	r6, #0
 800429a:	b11d      	cbz	r5, 80042a4 <__udivmoddi4+0xa0>
 800429c:	40d4      	lsrs	r4, r2
 800429e:	2300      	movs	r3, #0
 80042a0:	e9c5 4300 	strd	r4, r3, [r5]
 80042a4:	4631      	mov	r1, r6
 80042a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042aa:	b902      	cbnz	r2, 80042ae <__udivmoddi4+0xaa>
 80042ac:	deff      	udf	#255	; 0xff
 80042ae:	fab2 f282 	clz	r2, r2
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d150      	bne.n	8004358 <__udivmoddi4+0x154>
 80042b6:	1bcb      	subs	r3, r1, r7
 80042b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80042bc:	fa1f f887 	uxth.w	r8, r7
 80042c0:	2601      	movs	r6, #1
 80042c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80042c6:	0c21      	lsrs	r1, r4, #16
 80042c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80042cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80042d0:	fb08 f30c 	mul.w	r3, r8, ip
 80042d4:	428b      	cmp	r3, r1
 80042d6:	d907      	bls.n	80042e8 <__udivmoddi4+0xe4>
 80042d8:	1879      	adds	r1, r7, r1
 80042da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80042de:	d202      	bcs.n	80042e6 <__udivmoddi4+0xe2>
 80042e0:	428b      	cmp	r3, r1
 80042e2:	f200 80e9 	bhi.w	80044b8 <__udivmoddi4+0x2b4>
 80042e6:	4684      	mov	ip, r0
 80042e8:	1ac9      	subs	r1, r1, r3
 80042ea:	b2a3      	uxth	r3, r4
 80042ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80042f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80042f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80042f8:	fb08 f800 	mul.w	r8, r8, r0
 80042fc:	45a0      	cmp	r8, r4
 80042fe:	d907      	bls.n	8004310 <__udivmoddi4+0x10c>
 8004300:	193c      	adds	r4, r7, r4
 8004302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004306:	d202      	bcs.n	800430e <__udivmoddi4+0x10a>
 8004308:	45a0      	cmp	r8, r4
 800430a:	f200 80d9 	bhi.w	80044c0 <__udivmoddi4+0x2bc>
 800430e:	4618      	mov	r0, r3
 8004310:	eba4 0408 	sub.w	r4, r4, r8
 8004314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8004318:	e7bf      	b.n	800429a <__udivmoddi4+0x96>
 800431a:	428b      	cmp	r3, r1
 800431c:	d909      	bls.n	8004332 <__udivmoddi4+0x12e>
 800431e:	2d00      	cmp	r5, #0
 8004320:	f000 80b1 	beq.w	8004486 <__udivmoddi4+0x282>
 8004324:	2600      	movs	r6, #0
 8004326:	e9c5 0100 	strd	r0, r1, [r5]
 800432a:	4630      	mov	r0, r6
 800432c:	4631      	mov	r1, r6
 800432e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004332:	fab3 f683 	clz	r6, r3
 8004336:	2e00      	cmp	r6, #0
 8004338:	d14a      	bne.n	80043d0 <__udivmoddi4+0x1cc>
 800433a:	428b      	cmp	r3, r1
 800433c:	d302      	bcc.n	8004344 <__udivmoddi4+0x140>
 800433e:	4282      	cmp	r2, r0
 8004340:	f200 80b8 	bhi.w	80044b4 <__udivmoddi4+0x2b0>
 8004344:	1a84      	subs	r4, r0, r2
 8004346:	eb61 0103 	sbc.w	r1, r1, r3
 800434a:	2001      	movs	r0, #1
 800434c:	468c      	mov	ip, r1
 800434e:	2d00      	cmp	r5, #0
 8004350:	d0a8      	beq.n	80042a4 <__udivmoddi4+0xa0>
 8004352:	e9c5 4c00 	strd	r4, ip, [r5]
 8004356:	e7a5      	b.n	80042a4 <__udivmoddi4+0xa0>
 8004358:	f1c2 0320 	rsb	r3, r2, #32
 800435c:	fa20 f603 	lsr.w	r6, r0, r3
 8004360:	4097      	lsls	r7, r2
 8004362:	fa01 f002 	lsl.w	r0, r1, r2
 8004366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800436a:	40d9      	lsrs	r1, r3
 800436c:	4330      	orrs	r0, r6
 800436e:	0c03      	lsrs	r3, r0, #16
 8004370:	fbb1 f6fe 	udiv	r6, r1, lr
 8004374:	fa1f f887 	uxth.w	r8, r7
 8004378:	fb0e 1116 	mls	r1, lr, r6, r1
 800437c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004380:	fb06 f108 	mul.w	r1, r6, r8
 8004384:	4299      	cmp	r1, r3
 8004386:	fa04 f402 	lsl.w	r4, r4, r2
 800438a:	d909      	bls.n	80043a0 <__udivmoddi4+0x19c>
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8004392:	f080 808d 	bcs.w	80044b0 <__udivmoddi4+0x2ac>
 8004396:	4299      	cmp	r1, r3
 8004398:	f240 808a 	bls.w	80044b0 <__udivmoddi4+0x2ac>
 800439c:	3e02      	subs	r6, #2
 800439e:	443b      	add	r3, r7
 80043a0:	1a5b      	subs	r3, r3, r1
 80043a2:	b281      	uxth	r1, r0
 80043a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80043a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80043ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80043b0:	fb00 f308 	mul.w	r3, r0, r8
 80043b4:	428b      	cmp	r3, r1
 80043b6:	d907      	bls.n	80043c8 <__udivmoddi4+0x1c4>
 80043b8:	1879      	adds	r1, r7, r1
 80043ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80043be:	d273      	bcs.n	80044a8 <__udivmoddi4+0x2a4>
 80043c0:	428b      	cmp	r3, r1
 80043c2:	d971      	bls.n	80044a8 <__udivmoddi4+0x2a4>
 80043c4:	3802      	subs	r0, #2
 80043c6:	4439      	add	r1, r7
 80043c8:	1acb      	subs	r3, r1, r3
 80043ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80043ce:	e778      	b.n	80042c2 <__udivmoddi4+0xbe>
 80043d0:	f1c6 0c20 	rsb	ip, r6, #32
 80043d4:	fa03 f406 	lsl.w	r4, r3, r6
 80043d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80043dc:	431c      	orrs	r4, r3
 80043de:	fa20 f70c 	lsr.w	r7, r0, ip
 80043e2:	fa01 f306 	lsl.w	r3, r1, r6
 80043e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80043ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80043ee:	431f      	orrs	r7, r3
 80043f0:	0c3b      	lsrs	r3, r7, #16
 80043f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80043f6:	fa1f f884 	uxth.w	r8, r4
 80043fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80043fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8004402:	fb09 fa08 	mul.w	sl, r9, r8
 8004406:	458a      	cmp	sl, r1
 8004408:	fa02 f206 	lsl.w	r2, r2, r6
 800440c:	fa00 f306 	lsl.w	r3, r0, r6
 8004410:	d908      	bls.n	8004424 <__udivmoddi4+0x220>
 8004412:	1861      	adds	r1, r4, r1
 8004414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8004418:	d248      	bcs.n	80044ac <__udivmoddi4+0x2a8>
 800441a:	458a      	cmp	sl, r1
 800441c:	d946      	bls.n	80044ac <__udivmoddi4+0x2a8>
 800441e:	f1a9 0902 	sub.w	r9, r9, #2
 8004422:	4421      	add	r1, r4
 8004424:	eba1 010a 	sub.w	r1, r1, sl
 8004428:	b2bf      	uxth	r7, r7
 800442a:	fbb1 f0fe 	udiv	r0, r1, lr
 800442e:	fb0e 1110 	mls	r1, lr, r0, r1
 8004432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8004436:	fb00 f808 	mul.w	r8, r0, r8
 800443a:	45b8      	cmp	r8, r7
 800443c:	d907      	bls.n	800444e <__udivmoddi4+0x24a>
 800443e:	19e7      	adds	r7, r4, r7
 8004440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8004444:	d22e      	bcs.n	80044a4 <__udivmoddi4+0x2a0>
 8004446:	45b8      	cmp	r8, r7
 8004448:	d92c      	bls.n	80044a4 <__udivmoddi4+0x2a0>
 800444a:	3802      	subs	r0, #2
 800444c:	4427      	add	r7, r4
 800444e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8004452:	eba7 0708 	sub.w	r7, r7, r8
 8004456:	fba0 8902 	umull	r8, r9, r0, r2
 800445a:	454f      	cmp	r7, r9
 800445c:	46c6      	mov	lr, r8
 800445e:	4649      	mov	r1, r9
 8004460:	d31a      	bcc.n	8004498 <__udivmoddi4+0x294>
 8004462:	d017      	beq.n	8004494 <__udivmoddi4+0x290>
 8004464:	b15d      	cbz	r5, 800447e <__udivmoddi4+0x27a>
 8004466:	ebb3 020e 	subs.w	r2, r3, lr
 800446a:	eb67 0701 	sbc.w	r7, r7, r1
 800446e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8004472:	40f2      	lsrs	r2, r6
 8004474:	ea4c 0202 	orr.w	r2, ip, r2
 8004478:	40f7      	lsrs	r7, r6
 800447a:	e9c5 2700 	strd	r2, r7, [r5]
 800447e:	2600      	movs	r6, #0
 8004480:	4631      	mov	r1, r6
 8004482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004486:	462e      	mov	r6, r5
 8004488:	4628      	mov	r0, r5
 800448a:	e70b      	b.n	80042a4 <__udivmoddi4+0xa0>
 800448c:	4606      	mov	r6, r0
 800448e:	e6e9      	b.n	8004264 <__udivmoddi4+0x60>
 8004490:	4618      	mov	r0, r3
 8004492:	e6fd      	b.n	8004290 <__udivmoddi4+0x8c>
 8004494:	4543      	cmp	r3, r8
 8004496:	d2e5      	bcs.n	8004464 <__udivmoddi4+0x260>
 8004498:	ebb8 0e02 	subs.w	lr, r8, r2
 800449c:	eb69 0104 	sbc.w	r1, r9, r4
 80044a0:	3801      	subs	r0, #1
 80044a2:	e7df      	b.n	8004464 <__udivmoddi4+0x260>
 80044a4:	4608      	mov	r0, r1
 80044a6:	e7d2      	b.n	800444e <__udivmoddi4+0x24a>
 80044a8:	4660      	mov	r0, ip
 80044aa:	e78d      	b.n	80043c8 <__udivmoddi4+0x1c4>
 80044ac:	4681      	mov	r9, r0
 80044ae:	e7b9      	b.n	8004424 <__udivmoddi4+0x220>
 80044b0:	4666      	mov	r6, ip
 80044b2:	e775      	b.n	80043a0 <__udivmoddi4+0x19c>
 80044b4:	4630      	mov	r0, r6
 80044b6:	e74a      	b.n	800434e <__udivmoddi4+0x14a>
 80044b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80044bc:	4439      	add	r1, r7
 80044be:	e713      	b.n	80042e8 <__udivmoddi4+0xe4>
 80044c0:	3802      	subs	r0, #2
 80044c2:	443c      	add	r4, r7
 80044c4:	e724      	b.n	8004310 <__udivmoddi4+0x10c>
 80044c6:	bf00      	nop

080044c8 <__aeabi_idiv0>:
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop

080044cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <__NVIC_GetPriorityGrouping+0x18>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 0307 	and.w	r3, r3, #7
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	db0b      	blt.n	8004512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	4907      	ldr	r1, [pc, #28]	; (8004520 <__NVIC_EnableIRQ+0x38>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2001      	movs	r0, #1
 800450a:	fa00 f202 	lsl.w	r2, r0, r2
 800450e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	2b00      	cmp	r3, #0
 8004534:	db12      	blt.n	800455c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	f003 021f 	and.w	r2, r3, #31
 800453c:	490a      	ldr	r1, [pc, #40]	; (8004568 <__NVIC_DisableIRQ+0x44>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2001      	movs	r0, #1
 8004546:	fa00 f202 	lsl.w	r2, r0, r2
 800454a:	3320      	adds	r3, #32
 800454c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004550:	f3bf 8f4f 	dsb	sy
}
 8004554:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004556:	f3bf 8f6f 	isb	sy
}
 800455a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	e000e100 	.word	0xe000e100

0800456c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db0a      	blt.n	8004596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	490c      	ldr	r1, [pc, #48]	; (80045b8 <__NVIC_SetPriority+0x4c>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	440b      	add	r3, r1
 8004590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004594:	e00a      	b.n	80045ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4908      	ldr	r1, [pc, #32]	; (80045bc <__NVIC_SetPriority+0x50>)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3b04      	subs	r3, #4
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	440b      	add	r3, r1
 80045aa:	761a      	strb	r2, [r3, #24]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000e100 	.word	0xe000e100
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	; 0x24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f1c3 0307 	rsb	r3, r3, #7
 80045da:	2b04      	cmp	r3, #4
 80045dc:	bf28      	it	cs
 80045de:	2304      	movcs	r3, #4
 80045e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d902      	bls.n	80045f0 <NVIC_EncodePriority+0x30>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3b03      	subs	r3, #3
 80045ee:	e000      	b.n	80045f2 <NVIC_EncodePriority+0x32>
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	401a      	ands	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	43d9      	mvns	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	4313      	orrs	r3, r2
         );
}
 800461a:	4618      	mov	r0, r3
 800461c:	3724      	adds	r7, #36	; 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800462c:	f3bf 8f4f 	dsb	sy
}
 8004630:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <__NVIC_SystemReset+0x24>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800463a:	4904      	ldr	r1, [pc, #16]	; (800464c <__NVIC_SystemReset+0x24>)
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <__NVIC_SystemReset+0x28>)
 800463e:	4313      	orrs	r3, r2
 8004640:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004642:	f3bf 8f4f 	dsb	sy
}
 8004646:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004648:	bf00      	nop
 800464a:	e7fd      	b.n	8004648 <__NVIC_SystemReset+0x20>
 800464c:	e000ed00 	.word	0xe000ed00
 8004650:	05fa0004 	.word	0x05fa0004

08004654 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800465e:	4a0c      	ldr	r2, [pc, #48]	; (8004690 <LL_DMA_EnableStream+0x3c>)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4413      	add	r3, r2
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4413      	add	r3, r2
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4908      	ldr	r1, [pc, #32]	; (8004690 <LL_DMA_EnableStream+0x3c>)
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	440a      	add	r2, r1
 8004674:	7812      	ldrb	r2, [r2, #0]
 8004676:	4611      	mov	r1, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	440a      	add	r2, r1
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6013      	str	r3, [r2, #0]
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	08007f64 	.word	0x08007f64

08004694 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800469e:	4a0c      	ldr	r2, [pc, #48]	; (80046d0 <LL_DMA_DisableStream+0x3c>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4413      	add	r3, r2
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4413      	add	r3, r2
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4908      	ldr	r1, [pc, #32]	; (80046d0 <LL_DMA_DisableStream+0x3c>)
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	440a      	add	r2, r1
 80046b4:	7812      	ldrb	r2, [r2, #0]
 80046b6:	4611      	mov	r1, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	440a      	add	r2, r1
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	6013      	str	r3, [r2, #0]
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	08007f64 	.word	0x08007f64

080046d4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80046e0:	4a0d      	ldr	r2, [pc, #52]	; (8004718 <LL_DMA_SetDataTransferDirection+0x44>)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4413      	add	r3, r2
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046f4:	4908      	ldr	r1, [pc, #32]	; (8004718 <LL_DMA_SetDataTransferDirection+0x44>)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	440b      	add	r3, r1
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	4619      	mov	r1, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	440b      	add	r3, r1
 8004702:	4619      	mov	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	08007f64 	.word	0x08007f64

0800471c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8004728:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <LL_DMA_SetMode+0x44>)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4413      	add	r3, r2
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800473c:	4908      	ldr	r1, [pc, #32]	; (8004760 <LL_DMA_SetMode+0x44>)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	440b      	add	r3, r1
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	4619      	mov	r1, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	440b      	add	r3, r1
 800474a:	4619      	mov	r1, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]
}
 8004752:	bf00      	nop
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	08007f64 	.word	0x08007f64

08004764 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8004770:	4a0d      	ldr	r2, [pc, #52]	; (80047a8 <LL_DMA_SetPeriphIncMode+0x44>)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4413      	add	r3, r2
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004784:	4908      	ldr	r1, [pc, #32]	; (80047a8 <LL_DMA_SetPeriphIncMode+0x44>)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	440b      	add	r3, r1
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	4619      	mov	r1, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	440b      	add	r3, r1
 8004792:	4619      	mov	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
}
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	08007f64 	.word	0x08007f64

080047ac <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80047b8:	4a0d      	ldr	r2, [pc, #52]	; (80047f0 <LL_DMA_SetMemoryIncMode+0x44>)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4413      	add	r3, r2
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047cc:	4908      	ldr	r1, [pc, #32]	; (80047f0 <LL_DMA_SetMemoryIncMode+0x44>)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	440b      	add	r3, r1
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	4619      	mov	r1, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	440b      	add	r3, r1
 80047da:	4619      	mov	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4313      	orrs	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	08007f64 	.word	0x08007f64

080047f4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8004800:	4a0d      	ldr	r2, [pc, #52]	; (8004838 <LL_DMA_SetPeriphSize+0x44>)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4413      	add	r3, r2
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004814:	4908      	ldr	r1, [pc, #32]	; (8004838 <LL_DMA_SetPeriphSize+0x44>)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	440b      	add	r3, r1
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	4619      	mov	r1, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	440b      	add	r3, r1
 8004822:	4619      	mov	r1, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	08007f64 	.word	0x08007f64

0800483c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8004848:	4a0d      	ldr	r2, [pc, #52]	; (8004880 <LL_DMA_SetMemorySize+0x44>)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4413      	add	r3, r2
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800485c:	4908      	ldr	r1, [pc, #32]	; (8004880 <LL_DMA_SetMemorySize+0x44>)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	440b      	add	r3, r1
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	440b      	add	r3, r1
 800486a:	4619      	mov	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	08007f64 	.word	0x08007f64

08004884 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8004890:	4a0d      	ldr	r2, [pc, #52]	; (80048c8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4413      	add	r3, r2
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048a4:	4908      	ldr	r1, [pc, #32]	; (80048c8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	440b      	add	r3, r1
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	4619      	mov	r1, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	440b      	add	r3, r1
 80048b2:	4619      	mov	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]
}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	08007f64 	.word	0x08007f64

080048cc <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80048d8:	4a0d      	ldr	r2, [pc, #52]	; (8004910 <LL_DMA_SetDataLength+0x44>)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4413      	add	r3, r2
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	041b      	lsls	r3, r3, #16
 80048ec:	4908      	ldr	r1, [pc, #32]	; (8004910 <LL_DMA_SetDataLength+0x44>)
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	440a      	add	r2, r1
 80048f2:	7812      	ldrb	r2, [r2, #0]
 80048f4:	4611      	mov	r1, r2
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	440a      	add	r2, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	4313      	orrs	r3, r2
 8004900:	604b      	str	r3, [r1, #4]
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	08007f64 	.word	0x08007f64

08004914 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8004920:	4a0d      	ldr	r2, [pc, #52]	; (8004958 <LL_DMA_SetChannelSelection+0x44>)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4413      	add	r3, r2
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4413      	add	r3, r2
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004934:	4908      	ldr	r1, [pc, #32]	; (8004958 <LL_DMA_SetChannelSelection+0x44>)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	440b      	add	r3, r1
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	4619      	mov	r1, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	440b      	add	r3, r1
 8004942:	4619      	mov	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	08007f64 	.word	0x08007f64

0800495c <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8004966:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <LL_DMA_DisableFifoMode+0x3c>)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	4413      	add	r3, r2
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4413      	add	r3, r2
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	4908      	ldr	r1, [pc, #32]	; (8004998 <LL_DMA_DisableFifoMode+0x3c>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	440a      	add	r2, r1
 800497c:	7812      	ldrb	r2, [r2, #0]
 800497e:	4611      	mov	r1, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	440a      	add	r2, r1
 8004984:	f023 0304 	bic.w	r3, r3, #4
 8004988:	6153      	str	r3, [r2, #20]
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	08007f64 	.word	0x08007f64

0800499c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80049a8:	4a07      	ldr	r2, [pc, #28]	; (80049c8 <LL_DMA_SetMemoryAddress+0x2c>)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4413      	add	r3, r2
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60d3      	str	r3, [r2, #12]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	08007f64 	.word	0x08007f64

080049cc <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80049d8:	4a07      	ldr	r2, [pc, #28]	; (80049f8 <LL_DMA_SetPeriphAddress+0x2c>)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4413      	add	r3, r2
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	461a      	mov	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6093      	str	r3, [r2, #8]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	08007f64 	.word	0x08007f64

080049fc <LL_DMA_ClearFlag_HT6>:
  * @rmtoll HIFCR  CHTIF6    LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a0a:	60da      	str	r2, [r3, #12]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a26:	60da      	str	r2, [r3, #12]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 8004a3e:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <LL_DMA_EnableIT_HT+0x3c>)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4908      	ldr	r1, [pc, #32]	; (8004a70 <LL_DMA_EnableIT_HT+0x3c>)
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	440a      	add	r2, r1
 8004a54:	7812      	ldrb	r2, [r2, #0]
 8004a56:	4611      	mov	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f043 0308 	orr.w	r3, r3, #8
 8004a60:	6013      	str	r3, [r2, #0]
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	08007f64 	.word	0x08007f64

08004a74 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8004a7e:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <LL_DMA_EnableIT_TC+0x3c>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4413      	add	r3, r2
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4908      	ldr	r1, [pc, #32]	; (8004ab0 <LL_DMA_EnableIT_TC+0x3c>)
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	440a      	add	r2, r1
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	4611      	mov	r1, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f043 0310 	orr.w	r3, r3, #16
 8004aa0:	6013      	str	r3, [r2, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	08007f64 	.word	0x08007f64

08004ab4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <LL_RCC_HSE_Enable+0x1c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a04      	ldr	r2, [pc, #16]	; (8004ad0 <LL_RCC_HSE_Enable+0x1c>)
 8004abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800

08004ad4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004ad8:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <LL_RCC_HSE_IsReady+0x24>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ae4:	bf0c      	ite	eq
 8004ae6:	2301      	moveq	r3, #1
 8004ae8:	2300      	movne	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800

08004afc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <LL_RCC_SetSysClkSource+0x24>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f023 0203 	bic.w	r2, r3, #3
 8004b0c:	4904      	ldr	r1, [pc, #16]	; (8004b20 <LL_RCC_SetSysClkSource+0x24>)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	608b      	str	r3, [r1, #8]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40023800 	.word	0x40023800

08004b24 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <LL_RCC_GetSysClkSource+0x18>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 030c 	and.w	r3, r3, #12
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40023800 	.word	0x40023800

08004b40 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <LL_RCC_SetAHBPrescaler+0x24>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b50:	4904      	ldr	r1, [pc, #16]	; (8004b64 <LL_RCC_SetAHBPrescaler+0x24>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	608b      	str	r3, [r1, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	40023800 	.word	0x40023800

08004b68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b78:	4904      	ldr	r1, [pc, #16]	; (8004b8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40023800 	.word	0x40023800

08004b90 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ba0:	4904      	ldr	r1, [pc, #16]	; (8004bb4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40023800 	.word	0x40023800

08004bb8 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <LL_RCC_SetTIMPrescaler+0x28>)
 8004bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bca:	4905      	ldr	r1, [pc, #20]	; (8004be0 <LL_RCC_SetTIMPrescaler+0x28>)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40023800 	.word	0x40023800

08004be4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <LL_RCC_PLL_Enable+0x1c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <LL_RCC_PLL_Enable+0x1c>)
 8004bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	6013      	str	r3, [r2, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800

08004c04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <LL_RCC_PLL_IsReady+0x24>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800

08004c2c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	4311      	orrs	r1, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	0192      	lsls	r2, r2, #6
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	4908      	ldr	r1, [pc, #32]	; (8004c70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c5c:	4904      	ldr	r1, [pc, #16]	; (8004c70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40023800 	.word	0x40023800
 8004c74:	ffbf8000 	.word	0xffbf8000

08004c78 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004c80:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c84:	4907      	ldr	r1, [pc, #28]	; (8004ca4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4013      	ands	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c96:	68fb      	ldr	r3, [r7, #12]
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40023800 	.word	0x40023800

08004ca8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8004cb0:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb4:	4907      	ldr	r1, [pc, #28]	; (8004cd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40023800 	.word	0x40023800

08004cd8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004ce0:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004ce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce4:	4907      	ldr	r1, [pc, #28]	; (8004d04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40023800 	.word	0x40023800

08004d08 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <LL_FLASH_SetLatency+0x24>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f023 0207 	bic.w	r2, r3, #7
 8004d18:	4904      	ldr	r1, [pc, #16]	; (8004d2c <LL_FLASH_SetLatency+0x24>)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	600b      	str	r3, [r1, #0]
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	40023c00 	.word	0x40023c00

08004d30 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <LL_FLASH_GetLatency+0x18>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0307 	and.w	r3, r3, #7
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40023c00 	.word	0x40023c00

08004d4c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d5c:	4904      	ldr	r1, [pc, #16]	; (8004d70 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	600b      	str	r3, [r1, #0]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	40007000 	.word	0x40007000

08004d74 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f043 0201 	orr.w	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 0201 	bic.w	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	601a      	str	r2, [r3, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1a      	ldr	r2, [r3, #32]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	401a      	ands	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_TIM_CC_IsEnabledChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	4013      	ands	r3, r2
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d101      	bne.n	8004e52 <LL_TIM_CC_IsEnabledChannel+0x1c>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <LL_TIM_CC_IsEnabledChannel+0x1e>
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d01c      	beq.n	8004eaa <LL_TIM_OC_DisableFast+0x4a>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d017      	beq.n	8004ea6 <LL_TIM_OC_DisableFast+0x46>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d012      	beq.n	8004ea2 <LL_TIM_OC_DisableFast+0x42>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b40      	cmp	r3, #64	; 0x40
 8004e80:	d00d      	beq.n	8004e9e <LL_TIM_OC_DisableFast+0x3e>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e88:	d007      	beq.n	8004e9a <LL_TIM_OC_DisableFast+0x3a>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e90:	d101      	bne.n	8004e96 <LL_TIM_OC_DisableFast+0x36>
 8004e92:	2305      	movs	r3, #5
 8004e94:	e00a      	b.n	8004eac <LL_TIM_OC_DisableFast+0x4c>
 8004e96:	2306      	movs	r3, #6
 8004e98:	e008      	b.n	8004eac <LL_TIM_OC_DisableFast+0x4c>
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	e006      	b.n	8004eac <LL_TIM_OC_DisableFast+0x4c>
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e004      	b.n	8004eac <LL_TIM_OC_DisableFast+0x4c>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e002      	b.n	8004eac <LL_TIM_OC_DisableFast+0x4c>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <LL_TIM_OC_DisableFast+0x4c>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ee4 <LL_TIM_OC_DisableFast+0x84>)
 8004eb8:	5cd3      	ldrb	r3, [r2, r3]
 8004eba:	440b      	add	r3, r1
 8004ebc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	4908      	ldr	r1, [pc, #32]	; (8004ee8 <LL_TIM_OC_DisableFast+0x88>)
 8004ec6:	5ccb      	ldrb	r3, [r1, r3]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	2304      	movs	r3, #4
 8004ecc:	408b      	lsls	r3, r1
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	601a      	str	r2, [r3, #0]

}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	08007f6c 	.word	0x08007f6c
 8004ee8:	08007f74 	.word	0x08007f74

08004eec <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d01c      	beq.n	8004f36 <LL_TIM_OC_EnablePreload+0x4a>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d017      	beq.n	8004f32 <LL_TIM_OC_EnablePreload+0x46>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d012      	beq.n	8004f2e <LL_TIM_OC_EnablePreload+0x42>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d00d      	beq.n	8004f2a <LL_TIM_OC_EnablePreload+0x3e>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f14:	d007      	beq.n	8004f26 <LL_TIM_OC_EnablePreload+0x3a>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1c:	d101      	bne.n	8004f22 <LL_TIM_OC_EnablePreload+0x36>
 8004f1e:	2305      	movs	r3, #5
 8004f20:	e00a      	b.n	8004f38 <LL_TIM_OC_EnablePreload+0x4c>
 8004f22:	2306      	movs	r3, #6
 8004f24:	e008      	b.n	8004f38 <LL_TIM_OC_EnablePreload+0x4c>
 8004f26:	2304      	movs	r3, #4
 8004f28:	e006      	b.n	8004f38 <LL_TIM_OC_EnablePreload+0x4c>
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e004      	b.n	8004f38 <LL_TIM_OC_EnablePreload+0x4c>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e002      	b.n	8004f38 <LL_TIM_OC_EnablePreload+0x4c>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <LL_TIM_OC_EnablePreload+0x4c>
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3318      	adds	r3, #24
 8004f3e:	4619      	mov	r1, r3
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <LL_TIM_OC_EnablePreload+0x80>)
 8004f44:	5cd3      	ldrb	r3, [r2, r3]
 8004f46:	440b      	add	r3, r1
 8004f48:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	4907      	ldr	r1, [pc, #28]	; (8004f70 <LL_TIM_OC_EnablePreload+0x84>)
 8004f52:	5ccb      	ldrb	r3, [r1, r3]
 8004f54:	4619      	mov	r1, r3
 8004f56:	2308      	movs	r3, #8
 8004f58:	408b      	lsls	r3, r1
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	601a      	str	r2, [r3, #0]
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	08007f6c 	.word	0x08007f6c
 8004f70:	08007f74 	.word	0x08007f74

08004f74 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f86:	f023 0307 	bic.w	r3, r3, #7
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	609a      	str	r2, [r3, #8]
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	605a      	str	r2, [r3, #4]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <LL_TIM_EnableDMAReq_CC2>:
  * @rmtoll DIER         CC2DE         LL_TIM_EnableDMAReq_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC2(TIM_TypeDef *TIMx)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2DE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60da      	str	r2, [r3, #12]
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	615a      	str	r2, [r3, #20]
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
}
 800506a:	4618      	mov	r0, r3
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8005076:	b480      	push	{r7}
 8005078:	b089      	sub	sp, #36	; 0x24
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	330c      	adds	r3, #12
 8005082:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	60bb      	str	r3, [r7, #8]
   return(result);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f043 0320 	orr.w	r3, r3, #32
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	330c      	adds	r3, #12
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	61ba      	str	r2, [r7, #24]
 800509c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	6979      	ldr	r1, [r7, #20]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	613b      	str	r3, [r7, #16]
   return(result);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e7      	bne.n	800507e <LL_USART_EnableIT_RXNE+0x8>
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	3724      	adds	r7, #36	; 0x24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80050bc:	b480      	push	{r7}
 80050be:	b089      	sub	sp, #36	; 0x24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	330c      	adds	r3, #12
 80050c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	330c      	adds	r3, #12
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	61ba      	str	r2, [r7, #24]
 80050e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6979      	ldr	r1, [r7, #20]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	613b      	str	r3, [r7, #16]
   return(result);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e7      	bne.n	80050c4 <LL_USART_EnableIT_TC+0x8>
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	3724      	adds	r7, #36	; 0x24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800510e:	78fa      	ldrb	r2, [r7, #3]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	605a      	str	r2, [r3, #4]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	4013      	ands	r3, r2
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	bf0c      	ite	eq
 8005138:	2301      	moveq	r3, #1
 800513a:	2300      	movne	r3, #0
 800513c:	b2db      	uxtb	r3, r3
}
 800513e:	4618      	mov	r0, r3
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	619a      	str	r2, [r3, #24]
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	041a      	lsls	r2, r3, #16
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	619a      	str	r2, [r3, #24]
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	4013      	ands	r3, r2
 800519a:	041a      	lsls	r2, r3, #16
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	43d9      	mvns	r1, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	400b      	ands	r3, r1
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	619a      	str	r2, [r3, #24]
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <led_fill_led_pwm_data>:
 * \brief           Prepares data from memory for PWM output for timer
 * \note            Memory is in format R,G,B, while PWM must be configured in G,R,B[,W]
 * \param[in]       ledx: LED index to set the color
 * \param[out]      ptr: Output array with at least LED_CFG_RAW_BYTES_PER_LED-words of memory
 */
static uint8_t led_fill_led_pwm_data(uint8_t ledx, uint32_t* ptr) {
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	6039      	str	r1, [r7, #0]
 80051c2:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    if (ledx < NR_OF_LEDS) {
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	2b0f      	cmp	r3, #15
 80051c8:	d872      	bhi.n	80052b0 <led_fill_led_pwm_data+0xf8>
        for (i = 0; i < 8; i++) {
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
 80051ce:	e06a      	b.n	80052a6 <led_fill_led_pwm_data+0xee>
            ptr[i] =        (led[ledx] & (1 << (15 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	4a3b      	ldr	r2, [pc, #236]	; (80052c0 <led_fill_led_pwm_data+0x108>)
 80051d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	f1c2 020f 	rsb	r2, r2, #15
 80051de:	2101      	movs	r1, #1
 80051e0:	fa01 f202 	lsl.w	r2, r1, r2
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <led_fill_led_pwm_data+0x44>
 80051ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	4a34      	ldr	r2, [pc, #208]	; (80052c4 <led_fill_led_pwm_data+0x10c>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	e006      	b.n	800520a <led_fill_led_pwm_data+0x52>
 80051fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	4a30      	ldr	r2, [pc, #192]	; (80052c4 <led_fill_led_pwm_data+0x10c>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	7bfa      	ldrb	r2, [r7, #15]
 800520c:	0092      	lsls	r2, r2, #2
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	440a      	add	r2, r1
 8005212:	6013      	str	r3, [r2, #0]
            ptr[8 + i] =    (led[ledx] & (1 << (23 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	4a2a      	ldr	r2, [pc, #168]	; (80052c0 <led_fill_led_pwm_data+0x108>)
 8005218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521c:	7bfa      	ldrb	r2, [r7, #15]
 800521e:	f1c2 0217 	rsb	r2, r2, #23
 8005222:	2101      	movs	r1, #1
 8005224:	fa01 f202 	lsl.w	r2, r1, r2
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <led_fill_led_pwm_data+0x88>
 800522e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	4a23      	ldr	r2, [pc, #140]	; (80052c4 <led_fill_led_pwm_data+0x10c>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	e006      	b.n	800524e <led_fill_led_pwm_data+0x96>
 8005240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <led_fill_led_pwm_data+0x10c>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	3208      	adds	r2, #8
 8005252:	0092      	lsls	r2, r2, #2
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	440a      	add	r2, r1
 8005258:	6013      	str	r3, [r2, #0]
            ptr[16 + i] =   (led[ledx] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <led_fill_led_pwm_data+0x108>)
 800525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005262:	7bfa      	ldrb	r2, [r7, #15]
 8005264:	f1c2 0207 	rsb	r2, r2, #7
 8005268:	2101      	movs	r1, #1
 800526a:	fa01 f202 	lsl.w	r2, r1, r2
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <led_fill_led_pwm_data+0xce>
 8005274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	4a11      	ldr	r2, [pc, #68]	; (80052c4 <led_fill_led_pwm_data+0x10c>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	e006      	b.n	8005294 <led_fill_led_pwm_data+0xdc>
 8005286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	4a0d      	ldr	r2, [pc, #52]	; (80052c4 <led_fill_led_pwm_data+0x10c>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	7bfa      	ldrb	r2, [r7, #15]
 8005296:	3210      	adds	r2, #16
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	440a      	add	r2, r1
 800529e:	6013      	str	r3, [r2, #0]
        for (i = 0; i < 8; i++) {
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	3301      	adds	r3, #1
 80052a4:	73fb      	strb	r3, [r7, #15]
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b07      	cmp	r3, #7
 80052aa:	d991      	bls.n	80051d0 <led_fill_led_pwm_data+0x18>
        }
        return 1;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <led_fill_led_pwm_data+0xfa>
    }
    return 0;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000100 	.word	0x20000100
 80052c4:	aaaaaaab 	.word	0xaaaaaaab

080052c8 <led_update_sequence>:
 *                      HT is called when first LED_CFG_RAW_BYTES_PER_LED elements are transfered,
 *                      TC is called when second LED_CFG_RAW_BYTES_PER_LED elements are transfered.
 *
 * \note            This function must be called from DMA interrupt
 */
void led_update_sequence(uint8_t tc) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
    tc = !!tc;                                  /* Convert to 1 or 0 value only */
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	71fb      	strb	r3, [r7, #7]

    if (current_led < NR_OF_LEDS) {
 80052e0:	4b17      	ldr	r3, [pc, #92]	; (8005340 <led_update_sequence+0x78>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b0f      	cmp	r3, #15
 80052e6:	d817      	bhi.n	8005318 <led_update_sequence+0x50>

			current_led++;
 80052e8:	4b15      	ldr	r3, [pc, #84]	; (8005340 <led_update_sequence+0x78>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3301      	adds	r3, #1
 80052ee:	4a14      	ldr	r2, [pc, #80]	; (8005340 <led_update_sequence+0x78>)
 80052f0:	6013      	str	r3, [r2, #0]
			 *  - Prepare first part of array, because either there is no transfer
			 *      or second part (from HT to TC) is now in process for PWM transfer
			 *
			 * In other case (TC = 1)
			 */
			if (!tc) {
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d107      	bne.n	8005308 <led_update_sequence+0x40>
				led_fill_led_pwm_data(current_led, &tmp_led_data[0]);
 80052f8:	4b11      	ldr	r3, [pc, #68]	; (8005340 <led_update_sequence+0x78>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	4911      	ldr	r1, [pc, #68]	; (8005344 <led_update_sequence+0x7c>)
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff ff59 	bl	80051b8 <led_fill_led_pwm_data>
	} else if ((!tc && (NR_OF_LEDS & 0x01)) || (tc && !(NR_OF_LEDS & 0x01))) {
		LL_TIM_CC_DisableChannel(TIM2, LL_TIM_CHANNEL_CH2); /* Disable channel */
		LL_TIM_DisableCounter(TIM2);
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
	}
}
 8005306:	e017      	b.n	8005338 <led_update_sequence+0x70>
				led_fill_led_pwm_data(current_led, &tmp_led_data[3*8]);
 8005308:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <led_update_sequence+0x78>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	490e      	ldr	r1, [pc, #56]	; (8005348 <led_update_sequence+0x80>)
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff ff51 	bl	80051b8 <led_fill_led_pwm_data>
}
 8005316:	e00f      	b.n	8005338 <led_update_sequence+0x70>
	} else if ((!tc && (NR_OF_LEDS & 0x01)) || (tc && !(NR_OF_LEDS & 0x01))) {
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <led_update_sequence+0x70>
		LL_TIM_CC_DisableChannel(TIM2, LL_TIM_CHANNEL_CH2); /* Disable channel */
 800531e:	2110      	movs	r1, #16
 8005320:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005324:	f7ff fd75 	bl	8004e12 <LL_TIM_CC_DisableChannel>
		LL_TIM_DisableCounter(TIM2);
 8005328:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800532c:	f7ff fd32 	bl	8004d94 <LL_TIM_DisableCounter>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8005330:	2106      	movs	r1, #6
 8005332:	4806      	ldr	r0, [pc, #24]	; (800534c <led_update_sequence+0x84>)
 8005334:	f7ff f9ae 	bl	8004694 <LL_DMA_DisableStream>
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	200000ec 	.word	0x200000ec
 8005344:	2000002c 	.word	0x2000002c
 8005348:	2000008c 	.word	0x2000008c
 800534c:	40026000 	.word	0x40026000

08005350 <handleSerialData>:


void handleSerialData() {
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
	static uint8_t rxLength; /* number of data bytes to be received. addr&length not counted;  */
	static uint8_t rxByteNr;  /* index of received byte (start with 0) */
	static uint8_t rxAddress; /* node to be addressed, read from first byte */
	static uint8_t nodesSending; /* mode when nodes are sending and Pi is quiet */

	if ( (uwTick - lastTick) > 5 ) /* resync if there was no data for longer than 5 ms */
 8005354:	4b51      	ldr	r3, [pc, #324]	; (800549c <handleSerialData+0x14c>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b51      	ldr	r3, [pc, #324]	; (80054a0 <handleSerialData+0x150>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b05      	cmp	r3, #5
 8005360:	d90b      	bls.n	800537a <handleSerialData+0x2a>
	{
		rxLength = 0;
 8005362:	4b50      	ldr	r3, [pc, #320]	; (80054a4 <handleSerialData+0x154>)
 8005364:	2200      	movs	r2, #0
 8005366:	701a      	strb	r2, [r3, #0]
		rxByteNr = 0;
 8005368:	4b4f      	ldr	r3, [pc, #316]	; (80054a8 <handleSerialData+0x158>)
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
		rxAddress = 0;
 800536e:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <handleSerialData+0x15c>)
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
		nodesSending = 0;
 8005374:	4b4e      	ldr	r3, [pc, #312]	; (80054b0 <handleSerialData+0x160>)
 8005376:	2200      	movs	r2, #0
 8005378:	701a      	strb	r2, [r3, #0]
	}
	lastTick = uwTick;
 800537a:	4b48      	ldr	r3, [pc, #288]	; (800549c <handleSerialData+0x14c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a48      	ldr	r2, [pc, #288]	; (80054a0 <handleSerialData+0x150>)
 8005380:	6013      	str	r3, [r2, #0]


	if ( nodesSending ) {
 8005382:	4b4b      	ldr	r3, [pc, #300]	; (80054b0 <handleSerialData+0x160>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01d      	beq.n	80053c6 <handleSerialData+0x76>
		rxByteNr++;
 800538a:	4b47      	ldr	r3, [pc, #284]	; (80054a8 <handleSerialData+0x158>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	3301      	adds	r3, #1
 8005390:	b2da      	uxtb	r2, r3
 8005392:	4b45      	ldr	r3, [pc, #276]	; (80054a8 <handleSerialData+0x158>)
 8005394:	701a      	strb	r2, [r3, #0]
		if ( rxByteNr == 2*NODE_ADDRESS ) { /* this node is about to send except if its node 0 */
 8005396:	4b44      	ldr	r3, [pc, #272]	; (80054a8 <handleSerialData+0x158>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b04      	cmp	r3, #4
 800539c:	d108      	bne.n	80053b0 <handleSerialData+0x60>
			nodeStatus = 1;
 800539e:	4b45      	ldr	r3, [pc, #276]	; (80054b4 <handleSerialData+0x164>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
			rxByteNr += 2;
 80053a4:	4b40      	ldr	r3, [pc, #256]	; (80054a8 <handleSerialData+0x158>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	3302      	adds	r3, #2
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	4b3e      	ldr	r3, [pc, #248]	; (80054a8 <handleSerialData+0x158>)
 80053ae:	701a      	strb	r2, [r3, #0]
		}
		if ( rxByteNr == 2*NR_OF_NODES ) { /* all nodes finished sending */
 80053b0:	4b3d      	ldr	r3, [pc, #244]	; (80054a8 <handleSerialData+0x158>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d16c      	bne.n	8005492 <handleSerialData+0x142>
			nodesSending = 0;
 80053b8:	4b3d      	ldr	r3, [pc, #244]	; (80054b0 <handleSerialData+0x160>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	701a      	strb	r2, [r3, #0]
			rxByteNr = 0;
 80053be:	4b3a      	ldr	r3, [pc, #232]	; (80054a8 <handleSerialData+0x158>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
				rxByteNr++;
			}
		}
	}

}
 80053c4:	e065      	b.n	8005492 <handleSerialData+0x142>
		if ( rxByteNr == 0 ) {
 80053c6:	4b38      	ldr	r3, [pc, #224]	; (80054a8 <handleSerialData+0x158>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d13f      	bne.n	800544e <handleSerialData+0xfe>
			rxByteNr++;
 80053ce:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <handleSerialData+0x158>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	3301      	adds	r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <handleSerialData+0x158>)
 80053d8:	701a      	strb	r2, [r3, #0]
			rxLength = currentRx & 0xf; /* get length */
 80053da:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <handleSerialData+0x168>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	4b2f      	ldr	r3, [pc, #188]	; (80054a4 <handleSerialData+0x154>)
 80053e6:	701a      	strb	r2, [r3, #0]
			rxAddress = currentRx>>4;  /* get address */
 80053e8:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <handleSerialData+0x168>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <handleSerialData+0x15c>)
 80053f2:	701a      	strb	r2, [r3, #0]
			if ( rxLength == 0xf ) /* Software update */
 80053f4:	4b2b      	ldr	r3, [pc, #172]	; (80054a4 <handleSerialData+0x154>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b0f      	cmp	r3, #15
 80053fa:	d10d      	bne.n	8005418 <handleSerialData+0xc8>
				rxLength = 16; /* 16 bytes, that it is a multiple of 4 (good for CRC calculation) */
 80053fc:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <handleSerialData+0x154>)
 80053fe:	2210      	movs	r2, #16
 8005400:	701a      	strb	r2, [r3, #0]
				if ( rxAddress == NODE_ADDRESS )
 8005402:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <handleSerialData+0x15c>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d103      	bne.n	8005412 <handleSerialData+0xc2>
					nodeStatus = 2; /* Software update of this node */
 800540a:	4b2a      	ldr	r3, [pc, #168]	; (80054b4 <handleSerialData+0x164>)
 800540c:	2202      	movs	r2, #2
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e002      	b.n	8005418 <handleSerialData+0xc8>
					nodeStatus = 3;  /* Software update of other node */
 8005412:	4b28      	ldr	r3, [pc, #160]	; (80054b4 <handleSerialData+0x164>)
 8005414:	2203      	movs	r2, #3
 8005416:	701a      	strb	r2, [r3, #0]
			if ( rxAddress == NODE_ADDRESS ) {
 8005418:	4b24      	ldr	r3, [pc, #144]	; (80054ac <handleSerialData+0x15c>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d103      	bne.n	8005428 <handleSerialData+0xd8>
				rxBuffer[0] = currentRx;
 8005420:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <handleSerialData+0x168>)
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <handleSerialData+0x16c>)
 8005426:	701a      	strb	r2, [r3, #0]
			if ( (rxAddress == 14) && (nodeStatus != 2) && (nodeStatus != 3) ) {
 8005428:	4b20      	ldr	r3, [pc, #128]	; (80054ac <handleSerialData+0x15c>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b0e      	cmp	r3, #14
 800542e:	d130      	bne.n	8005492 <handleSerialData+0x142>
 8005430:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <handleSerialData+0x164>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d02c      	beq.n	8005492 <handleSerialData+0x142>
 8005438:	4b1e      	ldr	r3, [pc, #120]	; (80054b4 <handleSerialData+0x164>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b03      	cmp	r3, #3
 800543e:	d028      	beq.n	8005492 <handleSerialData+0x142>
					rxByteNr = 0;
 8005440:	4b19      	ldr	r3, [pc, #100]	; (80054a8 <handleSerialData+0x158>)
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]
					nodesSending = 1; /* more nodes are connected */
 8005446:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <handleSerialData+0x160>)
 8005448:	2201      	movs	r2, #1
 800544a:	701a      	strb	r2, [r3, #0]
}
 800544c:	e021      	b.n	8005492 <handleSerialData+0x142>
			if ( rxAddress == NODE_ADDRESS ) {
 800544e:	4b17      	ldr	r3, [pc, #92]	; (80054ac <handleSerialData+0x15c>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d106      	bne.n	8005464 <handleSerialData+0x114>
				rxBuffer[rxByteNr] = currentRx;
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <handleSerialData+0x158>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	4b16      	ldr	r3, [pc, #88]	; (80054b8 <handleSerialData+0x168>)
 800545e:	7819      	ldrb	r1, [r3, #0]
 8005460:	4b16      	ldr	r3, [pc, #88]	; (80054bc <handleSerialData+0x16c>)
 8005462:	5499      	strb	r1, [r3, r2]
			if (rxByteNr == rxLength) {
 8005464:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <handleSerialData+0x158>)
 8005466:	781a      	ldrb	r2, [r3, #0]
 8005468:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <handleSerialData+0x154>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d10a      	bne.n	8005486 <handleSerialData+0x136>
				rxByteNr = 0;
 8005470:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <handleSerialData+0x158>)
 8005472:	2200      	movs	r2, #0
 8005474:	701a      	strb	r2, [r3, #0]
				if ( rxAddress == NODE_ADDRESS ) {
 8005476:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <handleSerialData+0x15c>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d109      	bne.n	8005492 <handleSerialData+0x142>
					rxBufferUpdated = 1;
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <handleSerialData+0x170>)
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
}
 8005484:	e005      	b.n	8005492 <handleSerialData+0x142>
				rxByteNr++;
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <handleSerialData+0x158>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	3301      	adds	r3, #1
 800548c:	b2da      	uxtb	r2, r3
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <handleSerialData+0x158>)
 8005490:	701a      	strb	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	20000154 	.word	0x20000154
 80054a0:	200000f0 	.word	0x200000f0
 80054a4:	200000f4 	.word	0x200000f4
 80054a8:	200000f5 	.word	0x200000f5
 80054ac:	200000f6 	.word	0x200000f6
 80054b0:	200000f7 	.word	0x200000f7
 80054b4:	20000151 	.word	0x20000151
 80054b8:	20000029 	.word	0x20000029
 80054bc:	20000140 	.word	0x20000140
 80054c0:	20000152 	.word	0x20000152

080054c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b08f      	sub	sp, #60	; 0x3c
 80054c8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80054ca:	b672      	cpsid	i
}
 80054cc:	bf00      	nop
	/* to be started form bootloader, see also
	 * https://embetronicx.com/tutorials/microcontrollers/stm32/bootloader/simple-stm32-bootloader-implementation-bootloader-tutorial/
	 * edit system_stm32f4xx.c as well to enter offset and #define USER_VECT_TAB_ADDRESS
	 * and edit linker script STM32F401CCUX_FLASH.ld */
	__disable_irq();
	SCB->VTOR = 0x8004000;
 80054ce:	4bb8      	ldr	r3, [pc, #736]	; (80057b0 <main+0x2ec>)
 80054d0:	4ab8      	ldr	r2, [pc, #736]	; (80057b4 <main+0x2f0>)
 80054d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80054d4:	f3bf 8f4f 	dsb	sy
}
 80054d8:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80054da:	b662      	cpsie	i
}
 80054dc:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054de:	f001 f9c9 	bl	8006874 <HAL_Init>

  /* USER CODE BEGIN Init */
  rxBufferUpdated = 0;
 80054e2:	4bb5      	ldr	r3, [pc, #724]	; (80057b8 <main+0x2f4>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
  nodeStatus = 0;
 80054e8:	4bb4      	ldr	r3, [pc, #720]	; (80057bc <main+0x2f8>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
  for (uint8_t bb = 0; bb < 17; bb++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80054f4:	e009      	b.n	800550a <main+0x46>
  {
	  rxBuffer[bb] = 0;
 80054f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054fa:	4ab1      	ldr	r2, [pc, #708]	; (80057c0 <main+0x2fc>)
 80054fc:	2100      	movs	r1, #0
 80054fe:	54d1      	strb	r1, [r2, r3]
  for (uint8_t bb = 0; bb < 17; bb++)
 8005500:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005504:	3301      	adds	r3, #1
 8005506:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800550a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800550e:	2b10      	cmp	r3, #16
 8005510:	d9f1      	bls.n	80054f6 <main+0x32>
  }

  uint8_t txSwitchesByte1 = 0; /* all switches off, switches are low-active */
 8005512:	2300      	movs	r3, #0
 8005514:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint8_t txSwitchesByte2 = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  uint8_t prevTxSwitchByte1 = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
  uint8_t prevTxSwitchByte2 = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	73bb      	strb	r3, [r7, #14]
  uint8_t txByte1_transmitted = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  uint32_t stReload;
  uint32_t stNow, stOld;
  uint32_t stTicks = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t flipperPulse = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t readyToSendCounter = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t packetWatchDog = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	623b      	str	r3, [r7, #32]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800553c:	f000 fbe6 	bl	8005d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005540:	f000 ff86 	bl	8006450 <MX_GPIO_Init>
  MX_DMA_Init();
 8005544:	f000 ff6c 	bl	8006420 <MX_DMA_Init>
  MX_TIM1_Init();
 8005548:	f000 fc40 	bl	8005dcc <MX_TIM1_Init>
  MX_TIM2_Init();
 800554c:	f000 fcd8 	bl	8005f00 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005550:	f000 fd9e 	bl	8006090 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005554:	f000 fe56 	bl	8006204 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8005558:	f000 fefc 	bl	8006354 <MX_USART1_UART_Init>
  MX_CRC_Init();
 800555c:	f000 fc22 	bl	8005da4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* All outputs off */
  LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH1);
 8005560:	2101      	movs	r1, #1
 8005562:	4898      	ldr	r0, [pc, #608]	; (80057c4 <main+0x300>)
 8005564:	f7ff fc55 	bl	8004e12 <LL_TIM_CC_DisableChannel>
  LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH2);
 8005568:	2110      	movs	r1, #16
 800556a:	4896      	ldr	r0, [pc, #600]	; (80057c4 <main+0x300>)
 800556c:	f7ff fc51 	bl	8004e12 <LL_TIM_CC_DisableChannel>
  LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH3);
 8005570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005574:	4893      	ldr	r0, [pc, #588]	; (80057c4 <main+0x300>)
 8005576:	f7ff fc4c 	bl	8004e12 <LL_TIM_CC_DisableChannel>
  LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH4);
 800557a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800557e:	4891      	ldr	r0, [pc, #580]	; (80057c4 <main+0x300>)
 8005580:	f7ff fc47 	bl	8004e12 <LL_TIM_CC_DisableChannel>
  LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH1);
 8005584:	2101      	movs	r1, #1
 8005586:	4890      	ldr	r0, [pc, #576]	; (80057c8 <main+0x304>)
 8005588:	f7ff fc43 	bl	8004e12 <LL_TIM_CC_DisableChannel>
  LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH2);
 800558c:	2110      	movs	r1, #16
 800558e:	488e      	ldr	r0, [pc, #568]	; (80057c8 <main+0x304>)
 8005590:	f7ff fc3f 	bl	8004e12 <LL_TIM_CC_DisableChannel>
  LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH3);
 8005594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005598:	488b      	ldr	r0, [pc, #556]	; (80057c8 <main+0x304>)
 800559a:	f7ff fc3a 	bl	8004e12 <LL_TIM_CC_DisableChannel>
  LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH4);
 800559e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055a2:	4889      	ldr	r0, [pc, #548]	; (80057c8 <main+0x304>)
 80055a4:	f7ff fc35 	bl	8004e12 <LL_TIM_CC_DisableChannel>
  LL_TIM_EnableCounter(TIM3);
 80055a8:	4886      	ldr	r0, [pc, #536]	; (80057c4 <main+0x300>)
 80055aa:	f7ff fbe3 	bl	8004d74 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM4);
 80055ae:	4886      	ldr	r0, [pc, #536]	; (80057c8 <main+0x304>)
 80055b0:	f7ff fbe0 	bl	8004d74 <LL_TIM_EnableCounter>

  stOld = SysTick->VAL;
 80055b4:	4b85      	ldr	r3, [pc, #532]	; (80057cc <main+0x308>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	633b      	str	r3, [r7, #48]	; 0x30
  stReload = SysTick->LOAD;
 80055ba:	4b84      	ldr	r3, [pc, #528]	; (80057cc <main+0x308>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		/* count systicks. Only works that easy as the while loop is shorter than 1 ms!! Ohterwise make a systick interrupt */
	    stNow = SysTick->VAL;
 80055c0:	4b82      	ldr	r3, [pc, #520]	; (80057cc <main+0x308>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	607b      	str	r3, [r7, #4]
		if( stNow != stOld )
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d010      	beq.n	80055f0 <main+0x12c>
		{
			if ( stNow < stOld )
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d204      	bcs.n	80055e0 <main+0x11c>
			{
				stTicks = (stOld - stNow);
 80055d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055de:	e005      	b.n	80055ec <main+0x128>
			}
			else
			{
				stTicks = (stReload - stNow + stOld);
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e8:	4413      	add	r3, r2
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			stOld = stNow;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30
		}


		if(dataArrived)
 80055f0:	4b77      	ldr	r3, [pc, #476]	; (80057d0 <main+0x30c>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <main+0x13e>
		{
			dataArrived = 0;
 80055f8:	4b75      	ldr	r3, [pc, #468]	; (80057d0 <main+0x30c>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
			handleSerialData();
 80055fe:	f7ff fea7 	bl	8005350 <handleSerialData>
		}

		/* ---------- SW update  ----------- */

		if ( nodeStatus == 3 ) /* Software update of other node */
 8005602:	4b6e      	ldr	r3, [pc, #440]	; (80057bc <main+0x2f8>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d141      	bne.n	800568e <main+0x1ca>
		{
			  NVIC_DisableIRQ(USART1_IRQn);
 800560a:	2025      	movs	r0, #37	; 0x25
 800560c:	f7fe ff8a 	bl	8004524 <__NVIC_DisableIRQ>
			  /* All outputs off */
			  LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH1);
 8005610:	2101      	movs	r1, #1
 8005612:	486c      	ldr	r0, [pc, #432]	; (80057c4 <main+0x300>)
 8005614:	f7ff fbfd 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			  LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH2);
 8005618:	2110      	movs	r1, #16
 800561a:	486a      	ldr	r0, [pc, #424]	; (80057c4 <main+0x300>)
 800561c:	f7ff fbf9 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			  LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH3);
 8005620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005624:	4867      	ldr	r0, [pc, #412]	; (80057c4 <main+0x300>)
 8005626:	f7ff fbf4 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			  LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH4);
 800562a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800562e:	4865      	ldr	r0, [pc, #404]	; (80057c4 <main+0x300>)
 8005630:	f7ff fbef 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			  LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH1);
 8005634:	2101      	movs	r1, #1
 8005636:	4864      	ldr	r0, [pc, #400]	; (80057c8 <main+0x304>)
 8005638:	f7ff fbeb 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			  LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH2);
 800563c:	2110      	movs	r1, #16
 800563e:	4862      	ldr	r0, [pc, #392]	; (80057c8 <main+0x304>)
 8005640:	f7ff fbe7 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			  LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH3);
 8005644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005648:	485f      	ldr	r0, [pc, #380]	; (80057c8 <main+0x304>)
 800564a:	f7ff fbe2 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			  LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH4);
 800564e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005652:	485d      	ldr	r0, [pc, #372]	; (80057c8 <main+0x304>)
 8005654:	f7ff fbdd 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			  LL_TIM_EnableCounter(TIM3);
 8005658:	485a      	ldr	r0, [pc, #360]	; (80057c4 <main+0x300>)
 800565a:	f7ff fb8b 	bl	8004d74 <LL_TIM_EnableCounter>
			  LL_TIM_EnableCounter(TIM4);
 800565e:	485a      	ldr	r0, [pc, #360]	; (80057c8 <main+0x304>)
 8005660:	f7ff fb88 	bl	8004d74 <LL_TIM_EnableCounter>
			  txSwitchesByte1 = 0; /* all switches off */
 8005664:	2300      	movs	r3, #0
 8005666:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			  txSwitchesByte2 = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			  prevTxSwitchByte1 = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]
			  prevTxSwitchByte2 = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	73bb      	strb	r3, [r7, #14]
			  LL_GPIO_ResetOutputPin(BlueLED_GPIO_Port, BlueLED_Pin);
 8005678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800567c:	4855      	ldr	r0, [pc, #340]	; (80057d4 <main+0x310>)
 800567e:	f7ff fd72 	bl	8005166 <LL_GPIO_ResetOutputPin>

	  		  HAL_Delay(20000);
 8005682:	f644 6020 	movw	r0, #20000	; 0x4e20
 8005686:	f001 f967 	bl	8006958 <HAL_Delay>
			  NVIC_SystemReset();
 800568a:	f7fe ffcd 	bl	8004628 <__NVIC_SystemReset>
		}

		/* write new code to flash and reset */
		if (rxBufferUpdated && (nodeStatus == 2) ) /* Software update */
 800568e:	4b4a      	ldr	r3, [pc, #296]	; (80057b8 <main+0x2f4>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d056      	beq.n	8005744 <main+0x280>
 8005696:	4b49      	ldr	r3, [pc, #292]	; (80057bc <main+0x2f8>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d152      	bne.n	8005744 <main+0x280>
		{
			uint8_t ww = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	77fb      	strb	r3, [r7, #31]
			uint32_t loopcounter = 0; /* timer */
 80056a2:	2300      	movs	r3, #0
 80056a4:	61bb      	str	r3, [r7, #24]
			uint8_t blbl = 0; /* blink blink - so oft wird geblinkt */
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]
			uint32_t writeAddress = 0x08020000; /* begin of sector 5 */
 80056aa:	4b4b      	ldr	r3, [pc, #300]	; (80057d8 <main+0x314>)
 80056ac:	613b      	str	r3, [r7, #16]
			HAL_FLASH_Unlock();
 80056ae:	f001 facd 	bl	8006c4c <HAL_FLASH_Unlock>

			while (1)
			{
				if(dataArrived)
 80056b2:	4b47      	ldr	r3, [pc, #284]	; (80057d0 <main+0x30c>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d004      	beq.n	80056c4 <main+0x200>
				{
					dataArrived = 0;
 80056ba:	4b45      	ldr	r3, [pc, #276]	; (80057d0 <main+0x30c>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
					handleSerialData();
 80056c0:	f7ff fe46 	bl	8005350 <handleSerialData>
				}

				if (rxBufferUpdated && (nodeStatus == 2) )
 80056c4:	4b3c      	ldr	r3, [pc, #240]	; (80057b8 <main+0x2f4>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d025      	beq.n	8005718 <main+0x254>
 80056cc:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <main+0x2f8>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d121      	bne.n	8005718 <main+0x254>
				{
					rxBufferUpdated = 0;
 80056d4:	4b38      	ldr	r3, [pc, #224]	; (80057b8 <main+0x2f4>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
					loopcounter = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	61bb      	str	r3, [r7, #24]
					LL_GPIO_TogglePin (GPIOC, LL_GPIO_PIN_13);
 80056de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056e2:	483c      	ldr	r0, [pc, #240]	; (80057d4 <main+0x310>)
 80056e4:	f7ff fd4e 	bl	8005184 <LL_GPIO_TogglePin>
					for (ww = 0; ww < 16; ww++)
 80056e8:	2300      	movs	r3, #0
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e011      	b.n	8005712 <main+0x24e>
					{
						HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, writeAddress, ((uint8_t *)(rxBuffer+1))[ww] );
 80056ee:	7ffb      	ldrb	r3, [r7, #31]
 80056f0:	3301      	adds	r3, #1
 80056f2:	4a33      	ldr	r2, [pc, #204]	; (80057c0 <main+0x2fc>)
 80056f4:	4413      	add	r3, r2
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	6939      	ldr	r1, [r7, #16]
 8005700:	2000      	movs	r0, #0
 8005702:	f001 fa4f 	bl	8006ba4 <HAL_FLASH_Program>
						writeAddress++;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3301      	adds	r3, #1
 800570a:	613b      	str	r3, [r7, #16]
					for (ww = 0; ww < 16; ww++)
 800570c:	7ffb      	ldrb	r3, [r7, #31]
 800570e:	3301      	adds	r3, #1
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	7ffb      	ldrb	r3, [r7, #31]
 8005714:	2b0f      	cmp	r3, #15
 8005716:	d9ea      	bls.n	80056ee <main+0x22a>
					}
				}
				loopcounter++;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	3301      	adds	r3, #1
 800571c:	61bb      	str	r3, [r7, #24]
				if ( loopcounter > 3000000 ) /* ganz grob eine Sekunde */
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	4a2e      	ldr	r2, [pc, #184]	; (80057dc <main+0x318>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d909      	bls.n	800573a <main+0x276>
				{
					LL_GPIO_TogglePin (GPIOC, LL_GPIO_PIN_13);
 8005726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800572a:	482a      	ldr	r0, [pc, #168]	; (80057d4 <main+0x310>)
 800572c:	f7ff fd2a 	bl	8005184 <LL_GPIO_TogglePin>
					loopcounter = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	61bb      	str	r3, [r7, #24]
					blbl++;
 8005734:	7dfb      	ldrb	r3, [r7, #23]
 8005736:	3301      	adds	r3, #1
 8005738:	75fb      	strb	r3, [r7, #23]
				}
				if (blbl == 6) NVIC_SystemReset();
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	2b06      	cmp	r3, #6
 800573e:	d1b8      	bne.n	80056b2 <main+0x1ee>
 8005740:	f7fe ff72 	bl	8004628 <__NVIC_SystemReset>
		}
		/* ---------- SW update end ----------- */



		if (rxBufferUpdated) {
 8005744:	4b1c      	ldr	r3, [pc, #112]	; (80057b8 <main+0x2f4>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 81b2 	beq.w	8005ab2 <main+0x5ee>
		  LL_GPIO_TogglePin (GPIOC, LL_GPIO_PIN_13);
 800574e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005752:	4820      	ldr	r0, [pc, #128]	; (80057d4 <main+0x310>)
 8005754:	f7ff fd16 	bl	8005184 <LL_GPIO_TogglePin>
		  rxBufferUpdated = 0;
 8005758:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <main+0x2f4>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
		  packetWatchDog = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	623b      	str	r3, [r7, #32]

		  led[0] = ((rxBuffer[2]>>7)&1) ? WHITE : BLACK;
 8005762:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <main+0x2fc>)
 8005764:	789b      	ldrb	r3, [r3, #2]
 8005766:	09db      	lsrs	r3, r3, #7
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <main+0x2b4>
 8005772:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005776:	e000      	b.n	800577a <main+0x2b6>
 8005778:	2300      	movs	r3, #0
 800577a:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <main+0x31c>)
 800577c:	6013      	str	r3, [r2, #0]
		  led[1] = ((rxBuffer[2]>>6)&1) ? WHITE : BLACK;
 800577e:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <main+0x2fc>)
 8005780:	789b      	ldrb	r3, [r3, #2]
 8005782:	099b      	lsrs	r3, r3, #6
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <main+0x2d0>
 800578e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005792:	e000      	b.n	8005796 <main+0x2d2>
 8005794:	2300      	movs	r3, #0
 8005796:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <main+0x31c>)
 8005798:	6053      	str	r3, [r2, #4]
		  led[2] = ((rxBuffer[2]>>5)&1) ? WHITE : BLACK;
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <main+0x2fc>)
 800579c:	789b      	ldrb	r3, [r3, #2]
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01c      	beq.n	80057e4 <main+0x320>
 80057aa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80057ae:	e01a      	b.n	80057e6 <main+0x322>
 80057b0:	e000ed00 	.word	0xe000ed00
 80057b4:	08004000 	.word	0x08004000
 80057b8:	20000152 	.word	0x20000152
 80057bc:	20000151 	.word	0x20000151
 80057c0:	20000140 	.word	0x20000140
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	e000e010 	.word	0xe000e010
 80057d0:	20000028 	.word	0x20000028
 80057d4:	40020800 	.word	0x40020800
 80057d8:	08020000 	.word	0x08020000
 80057dc:	002dc6c0 	.word	0x002dc6c0
 80057e0:	20000100 	.word	0x20000100
 80057e4:	2300      	movs	r3, #0
 80057e6:	4aa8      	ldr	r2, [pc, #672]	; (8005a88 <main+0x5c4>)
 80057e8:	6093      	str	r3, [r2, #8]
		  led[3] = ((rxBuffer[2]>>4)&1) ? WHITE : BLACK;
 80057ea:	4ba8      	ldr	r3, [pc, #672]	; (8005a8c <main+0x5c8>)
 80057ec:	789b      	ldrb	r3, [r3, #2]
 80057ee:	091b      	lsrs	r3, r3, #4
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <main+0x33c>
 80057fa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80057fe:	e000      	b.n	8005802 <main+0x33e>
 8005800:	2300      	movs	r3, #0
 8005802:	4aa1      	ldr	r2, [pc, #644]	; (8005a88 <main+0x5c4>)
 8005804:	60d3      	str	r3, [r2, #12]
		  led[4] = ((rxBuffer[2]>>3)&1) ? WHITE : BLACK;
 8005806:	4ba1      	ldr	r3, [pc, #644]	; (8005a8c <main+0x5c8>)
 8005808:	789b      	ldrb	r3, [r3, #2]
 800580a:	08db      	lsrs	r3, r3, #3
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <main+0x358>
 8005816:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800581a:	e000      	b.n	800581e <main+0x35a>
 800581c:	2300      	movs	r3, #0
 800581e:	4a9a      	ldr	r2, [pc, #616]	; (8005a88 <main+0x5c4>)
 8005820:	6113      	str	r3, [r2, #16]
		  led[5] = ((rxBuffer[2]>>2)&1) ? WHITE : BLACK;
 8005822:	4b9a      	ldr	r3, [pc, #616]	; (8005a8c <main+0x5c8>)
 8005824:	789b      	ldrb	r3, [r3, #2]
 8005826:	089b      	lsrs	r3, r3, #2
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <main+0x374>
 8005832:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005836:	e000      	b.n	800583a <main+0x376>
 8005838:	2300      	movs	r3, #0
 800583a:	4a93      	ldr	r2, [pc, #588]	; (8005a88 <main+0x5c4>)
 800583c:	6153      	str	r3, [r2, #20]
		  led[6] = ((rxBuffer[2]>>1)&1) ? WHITE : BLACK;
 800583e:	4b93      	ldr	r3, [pc, #588]	; (8005a8c <main+0x5c8>)
 8005840:	789b      	ldrb	r3, [r3, #2]
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <main+0x390>
 800584e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005852:	e000      	b.n	8005856 <main+0x392>
 8005854:	2300      	movs	r3, #0
 8005856:	4a8c      	ldr	r2, [pc, #560]	; (8005a88 <main+0x5c4>)
 8005858:	6193      	str	r3, [r2, #24]
		  led[7] = ((rxBuffer[2]>>0)&1) ? WHITE : BLACK;
 800585a:	4b8c      	ldr	r3, [pc, #560]	; (8005a8c <main+0x5c8>)
 800585c:	789b      	ldrb	r3, [r3, #2]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <main+0x3a8>
 8005866:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800586a:	e000      	b.n	800586e <main+0x3aa>
 800586c:	2300      	movs	r3, #0
 800586e:	4a86      	ldr	r2, [pc, #536]	; (8005a88 <main+0x5c4>)
 8005870:	61d3      	str	r3, [r2, #28]

		  led[8] = ((rxBuffer[3]>>7)&1) ? BLUE : BLACK;
 8005872:	4b86      	ldr	r3, [pc, #536]	; (8005a8c <main+0x5c8>)
 8005874:	78db      	ldrb	r3, [r3, #3]
 8005876:	09db      	lsrs	r3, r3, #7
 8005878:	b2db      	uxtb	r3, r3
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <main+0x3c2>
 8005882:	23ff      	movs	r3, #255	; 0xff
 8005884:	e000      	b.n	8005888 <main+0x3c4>
 8005886:	2300      	movs	r3, #0
 8005888:	4a7f      	ldr	r2, [pc, #508]	; (8005a88 <main+0x5c4>)
 800588a:	6213      	str	r3, [r2, #32]
		  led[9] = ((rxBuffer[3]>>6)&1) ? BLUE : BLACK;
 800588c:	4b7f      	ldr	r3, [pc, #508]	; (8005a8c <main+0x5c8>)
 800588e:	78db      	ldrb	r3, [r3, #3]
 8005890:	099b      	lsrs	r3, r3, #6
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <main+0x3dc>
 800589c:	23ff      	movs	r3, #255	; 0xff
 800589e:	e000      	b.n	80058a2 <main+0x3de>
 80058a0:	2300      	movs	r3, #0
 80058a2:	4a79      	ldr	r2, [pc, #484]	; (8005a88 <main+0x5c4>)
 80058a4:	6253      	str	r3, [r2, #36]	; 0x24
		  led[10] = ((rxBuffer[3]>>5)&1) ? BLUE : BLACK;
 80058a6:	4b79      	ldr	r3, [pc, #484]	; (8005a8c <main+0x5c8>)
 80058a8:	78db      	ldrb	r3, [r3, #3]
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <main+0x3f6>
 80058b6:	23ff      	movs	r3, #255	; 0xff
 80058b8:	e000      	b.n	80058bc <main+0x3f8>
 80058ba:	2300      	movs	r3, #0
 80058bc:	4a72      	ldr	r2, [pc, #456]	; (8005a88 <main+0x5c4>)
 80058be:	6293      	str	r3, [r2, #40]	; 0x28
		  led[11] = ((rxBuffer[3]>>4)&1) ? BLUE : BLACK;
 80058c0:	4b72      	ldr	r3, [pc, #456]	; (8005a8c <main+0x5c8>)
 80058c2:	78db      	ldrb	r3, [r3, #3]
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <main+0x410>
 80058d0:	23ff      	movs	r3, #255	; 0xff
 80058d2:	e000      	b.n	80058d6 <main+0x412>
 80058d4:	2300      	movs	r3, #0
 80058d6:	4a6c      	ldr	r2, [pc, #432]	; (8005a88 <main+0x5c4>)
 80058d8:	62d3      	str	r3, [r2, #44]	; 0x2c
		  led[12] = ((rxBuffer[3]>>3)&1) ? BLUE : BLACK;
 80058da:	4b6c      	ldr	r3, [pc, #432]	; (8005a8c <main+0x5c8>)
 80058dc:	78db      	ldrb	r3, [r3, #3]
 80058de:	08db      	lsrs	r3, r3, #3
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <main+0x42a>
 80058ea:	23ff      	movs	r3, #255	; 0xff
 80058ec:	e000      	b.n	80058f0 <main+0x42c>
 80058ee:	2300      	movs	r3, #0
 80058f0:	4a65      	ldr	r2, [pc, #404]	; (8005a88 <main+0x5c4>)
 80058f2:	6313      	str	r3, [r2, #48]	; 0x30
		  led[13] = ((rxBuffer[3]>>2)&1) ? BLUE : BLACK;
 80058f4:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <main+0x5c8>)
 80058f6:	78db      	ldrb	r3, [r3, #3]
 80058f8:	089b      	lsrs	r3, r3, #2
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <main+0x444>
 8005904:	23ff      	movs	r3, #255	; 0xff
 8005906:	e000      	b.n	800590a <main+0x446>
 8005908:	2300      	movs	r3, #0
 800590a:	4a5f      	ldr	r2, [pc, #380]	; (8005a88 <main+0x5c4>)
 800590c:	6353      	str	r3, [r2, #52]	; 0x34
		  led[14] = ((rxBuffer[3]>>1)&1) ? BLUE : BLACK;
 800590e:	4b5f      	ldr	r3, [pc, #380]	; (8005a8c <main+0x5c8>)
 8005910:	78db      	ldrb	r3, [r3, #3]
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <main+0x45e>
 800591e:	23ff      	movs	r3, #255	; 0xff
 8005920:	e000      	b.n	8005924 <main+0x460>
 8005922:	2300      	movs	r3, #0
 8005924:	4a58      	ldr	r2, [pc, #352]	; (8005a88 <main+0x5c4>)
 8005926:	6393      	str	r3, [r2, #56]	; 0x38
		  led[15] = ((rxBuffer[3]>>0)&1) ? BLUE : BLACK;
 8005928:	4b58      	ldr	r3, [pc, #352]	; (8005a8c <main+0x5c8>)
 800592a:	78db      	ldrb	r3, [r3, #3]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <main+0x474>
 8005934:	23ff      	movs	r3, #255	; 0xff
 8005936:	e000      	b.n	800593a <main+0x476>
 8005938:	2300      	movs	r3, #0
 800593a:	4a53      	ldr	r2, [pc, #332]	; (8005a88 <main+0x5c4>)
 800593c:	63d3      	str	r3, [r2, #60]	; 0x3c

		  current_led = 0;
 800593e:	4b54      	ldr	r3, [pc, #336]	; (8005a90 <main+0x5cc>)
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
		  led_fill_led_pwm_data(current_led, &tmp_led_data[0]); /* first LED */
 8005944:	4b52      	ldr	r3, [pc, #328]	; (8005a90 <main+0x5cc>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	4952      	ldr	r1, [pc, #328]	; (8005a94 <main+0x5d0>)
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fc33 	bl	80051b8 <led_fill_led_pwm_data>
		  current_led++;
 8005952:	4b4f      	ldr	r3, [pc, #316]	; (8005a90 <main+0x5cc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3301      	adds	r3, #1
 8005958:	4a4d      	ldr	r2, [pc, #308]	; (8005a90 <main+0x5cc>)
 800595a:	6013      	str	r3, [r2, #0]
		  led_fill_led_pwm_data(current_led, &tmp_led_data[3*8]); /* second LED */
 800595c:	4b4c      	ldr	r3, [pc, #304]	; (8005a90 <main+0x5cc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	494d      	ldr	r1, [pc, #308]	; (8005a98 <main+0x5d4>)
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fc27 	bl	80051b8 <led_fill_led_pwm_data>

	      LL_DMA_ClearFlag_TC6(DMA1);
 800596a:	484c      	ldr	r0, [pc, #304]	; (8005a9c <main+0x5d8>)
 800596c:	f7ff f854 	bl	8004a18 <LL_DMA_ClearFlag_TC6>
	      LL_DMA_ClearFlag_HT6(DMA1);
 8005970:	484a      	ldr	r0, [pc, #296]	; (8005a9c <main+0x5d8>)
 8005972:	f7ff f843 	bl	80049fc <LL_DMA_ClearFlag_HT6>
	      LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 8005976:	2106      	movs	r1, #6
 8005978:	4848      	ldr	r0, [pc, #288]	; (8005a9c <main+0x5d8>)
 800597a:	f7fe fe6b 	bl	8004654 <LL_DMA_EnableStream>
	      LL_TIM_SetCounter (TIM2, 0);
 800597e:	2100      	movs	r1, #0
 8005980:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005984:	f7ff fa26 	bl	8004dd4 <LL_TIM_SetCounter>
	      LL_TIM_EnableCounter(TIM2);
 8005988:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800598c:	f7ff f9f2 	bl	8004d74 <LL_TIM_EnableCounter>
	      LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8005990:	2110      	movs	r1, #16
 8005992:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005996:	f7ff fa2b 	bl	8004df0 <LL_TIM_CC_EnableChannel>
			/* OB8 */
			/* OB8 -> upper flipper controlled by flipper button. Pi only enables flipper generally (e.g. not tilt)
			((rxBuffer[1]>>7)&1) ?
				LL_TIM_CC_EnableChannel (TIM4, LL_TIM_CHANNEL_CH3) : LL_TIM_CC_EnableChannel (TIM4, LL_TIM_CHANNEL_CH3);*/
			/* OB9 */
			((rxBuffer[1]>>6)&1) ?
 800599a:	4b3c      	ldr	r3, [pc, #240]	; (8005a8c <main+0x5c8>)
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	099b      	lsrs	r3, r3, #6
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f003 0301 	and.w	r3, r3, #1
				LL_TIM_CC_EnableChannel (TIM4, LL_TIM_CHANNEL_CH4) : LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH4);
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <main+0x4f2>
 80059aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059ae:	483c      	ldr	r0, [pc, #240]	; (8005aa0 <main+0x5dc>)
 80059b0:	f7ff fa1e 	bl	8004df0 <LL_TIM_CC_EnableChannel>
 80059b4:	e004      	b.n	80059c0 <main+0x4fc>
 80059b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059ba:	4839      	ldr	r0, [pc, #228]	; (8005aa0 <main+0x5dc>)
 80059bc:	f7ff fa29 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			/* OB1 */
			/* Flasher 7 */
			((rxBuffer[1]>>5)&1) ?
 80059c0:	4b32      	ldr	r3, [pc, #200]	; (8005a8c <main+0x5c8>)
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 0301 	and.w	r3, r3, #1
				LL_TIM_CC_EnableChannel (TIM3, LL_TIM_CHANNEL_CH4) : LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH4);
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <main+0x518>
 80059d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059d4:	4833      	ldr	r0, [pc, #204]	; (8005aa4 <main+0x5e0>)
 80059d6:	f7ff fa0b 	bl	8004df0 <LL_TIM_CC_EnableChannel>
 80059da:	e004      	b.n	80059e6 <main+0x522>
 80059dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059e0:	4830      	ldr	r0, [pc, #192]	; (8005aa4 <main+0x5e0>)
 80059e2:	f7ff fa16 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			/* OB6 */
			/* Flasher 6 */
			((rxBuffer[1]>>4)&1) ?
 80059e6:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <main+0x5c8>)
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f003 0301 	and.w	r3, r3, #1
				LL_TIM_CC_EnableChannel (TIM4, LL_TIM_CHANNEL_CH1) : LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH1);
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d004      	beq.n	8005a00 <main+0x53c>
 80059f6:	2101      	movs	r1, #1
 80059f8:	4829      	ldr	r0, [pc, #164]	; (8005aa0 <main+0x5dc>)
 80059fa:	f7ff f9f9 	bl	8004df0 <LL_TIM_CC_EnableChannel>
 80059fe:	e003      	b.n	8005a08 <main+0x544>
 8005a00:	2101      	movs	r1, #1
 8005a02:	4827      	ldr	r0, [pc, #156]	; (8005aa0 <main+0x5dc>)
 8005a04:	f7ff fa05 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			/* OB7 */
			/* Flasher 5 */
			((rxBuffer[1]>>3)&1) ?
 8005a08:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <main+0x5c8>)
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	08db      	lsrs	r3, r3, #3
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f003 0301 	and.w	r3, r3, #1
				LL_TIM_CC_EnableChannel (TIM4, LL_TIM_CHANNEL_CH2) : LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH2);
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <main+0x55e>
 8005a18:	2110      	movs	r1, #16
 8005a1a:	4821      	ldr	r0, [pc, #132]	; (8005aa0 <main+0x5dc>)
 8005a1c:	f7ff f9e8 	bl	8004df0 <LL_TIM_CC_EnableChannel>
 8005a20:	e003      	b.n	8005a2a <main+0x566>
 8005a22:	2110      	movs	r1, #16
 8005a24:	481e      	ldr	r0, [pc, #120]	; (8005aa0 <main+0x5dc>)
 8005a26:	f7ff f9f4 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			/* OA6 */
			/* Flasher 4 */
			((rxBuffer[1]>>2)&1) ?
 8005a2a:	4b18      	ldr	r3, [pc, #96]	; (8005a8c <main+0x5c8>)
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	089b      	lsrs	r3, r3, #2
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f003 0301 	and.w	r3, r3, #1
				LL_TIM_CC_EnableChannel (TIM3, LL_TIM_CHANNEL_CH1) : LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH1);
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <main+0x580>
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	4819      	ldr	r0, [pc, #100]	; (8005aa4 <main+0x5e0>)
 8005a3e:	f7ff f9d7 	bl	8004df0 <LL_TIM_CC_EnableChannel>
 8005a42:	e003      	b.n	8005a4c <main+0x588>
 8005a44:	2101      	movs	r1, #1
 8005a46:	4817      	ldr	r0, [pc, #92]	; (8005aa4 <main+0x5e0>)
 8005a48:	f7ff f9e3 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			/* OA7 */
			/* Flasher 3 */
			((rxBuffer[1]>>1)&1) ?
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <main+0x5c8>)
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0301 	and.w	r3, r3, #1
				LL_TIM_CC_EnableChannel (TIM3, LL_TIM_CHANNEL_CH2) : LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH2);
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <main+0x5a2>
 8005a5c:	2110      	movs	r1, #16
 8005a5e:	4811      	ldr	r0, [pc, #68]	; (8005aa4 <main+0x5e0>)
 8005a60:	f7ff f9c6 	bl	8004df0 <LL_TIM_CC_EnableChannel>
 8005a64:	e003      	b.n	8005a6e <main+0x5aa>
 8005a66:	2110      	movs	r1, #16
 8005a68:	480e      	ldr	r0, [pc, #56]	; (8005aa4 <main+0x5e0>)
 8005a6a:	f7ff f9d2 	bl	8004e12 <LL_TIM_CC_DisableChannel>
			/* OB0 */
			/* Flasher 2 */
			((rxBuffer[1]>>0)&1) ?
 8005a6e:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <main+0x5c8>)
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	f003 0301 	and.w	r3, r3, #1
				LL_TIM_CC_EnableChannel (TIM3, LL_TIM_CHANNEL_CH3) : LL_TIM_CC_DisableChannel (TIM3, LL_TIM_CHANNEL_CH3);
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d016      	beq.n	8005aa8 <main+0x5e4>
 8005a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a7e:	4809      	ldr	r0, [pc, #36]	; (8005aa4 <main+0x5e0>)
 8005a80:	f7ff f9b6 	bl	8004df0 <LL_TIM_CC_EnableChannel>
 8005a84:	e015      	b.n	8005ab2 <main+0x5ee>
 8005a86:	bf00      	nop
 8005a88:	20000100 	.word	0x20000100
 8005a8c:	20000140 	.word	0x20000140
 8005a90:	200000ec 	.word	0x200000ec
 8005a94:	2000002c 	.word	0x2000002c
 8005a98:	2000008c 	.word	0x2000008c
 8005a9c:	40026000 	.word	0x40026000
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005aac:	488c      	ldr	r0, [pc, #560]	; (8005ce0 <main+0x81c>)
 8005aae:	f7ff f9b0 	bl	8004e12 <LL_TIM_CC_DisableChannel>
		}

	    /* Poll switches and remember if they where activated until they are reset to 0 with
	     * after sent to Pi */
		txSwitchesByte1 |= (
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_8)<<7 |
 8005ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ab6:	488b      	ldr	r0, [pc, #556]	; (8005ce4 <main+0x820>)
 8005ab8:	f7ff fb32 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005abc:	4603      	mov	r3, r0
 8005abe:	01dc      	lsls	r4, r3, #7
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_5)<<6 |
 8005ac0:	2120      	movs	r1, #32
 8005ac2:	4888      	ldr	r0, [pc, #544]	; (8005ce4 <main+0x820>)
 8005ac4:	f7ff fb2c 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	019b      	lsls	r3, r3, #6
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_8)<<7 |
 8005acc:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_4)<<5 |
 8005ace:	2110      	movs	r1, #16
 8005ad0:	4884      	ldr	r0, [pc, #528]	; (8005ce4 <main+0x820>)
 8005ad2:	f7ff fb25 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	015b      	lsls	r3, r3, #5
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_5)<<6 |
 8005ada:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_3)<<4 |
 8005adc:	2108      	movs	r1, #8
 8005ade:	4881      	ldr	r0, [pc, #516]	; (8005ce4 <main+0x820>)
 8005ae0:	f7ff fb1e 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	011b      	lsls	r3, r3, #4
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_4)<<5 |
 8005ae8:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_2)<<3 |
 8005aea:	2104      	movs	r1, #4
 8005aec:	487d      	ldr	r0, [pc, #500]	; (8005ce4 <main+0x820>)
 8005aee:	f7ff fb17 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005af2:	4603      	mov	r3, r0
 8005af4:	00db      	lsls	r3, r3, #3
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_3)<<4 |
 8005af6:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_1)<<2 |
 8005af8:	2102      	movs	r1, #2
 8005afa:	487a      	ldr	r0, [pc, #488]	; (8005ce4 <main+0x820>)
 8005afc:	f7ff fb10 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005b00:	4603      	mov	r3, r0
 8005b02:	009b      	lsls	r3, r3, #2
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_2)<<3 |
 8005b04:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_13)<<1 |
 8005b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b0a:	4877      	ldr	r0, [pc, #476]	; (8005ce8 <main+0x824>)
 8005b0c:	f7ff fb08 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005b10:	4603      	mov	r3, r0
 8005b12:	005b      	lsls	r3, r3, #1
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_1)<<2 |
 8005b14:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_12));
 8005b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b1a:	4873      	ldr	r0, [pc, #460]	; (8005ce8 <main+0x824>)
 8005b1c:	f7ff fb00 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005b20:	4603      	mov	r3, r0
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_13)<<1 |
 8005b22:	4323      	orrs	r3, r4
		txSwitchesByte1 |= (
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		txSwitchesByte2 |= (
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_10)<<7 |
 8005b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b34:	486c      	ldr	r0, [pc, #432]	; (8005ce8 <main+0x824>)
 8005b36:	f7ff faf3 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	01dc      	lsls	r4, r3, #7
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_5)<<6 |
 8005b3e:	2120      	movs	r1, #32
 8005b40:	4869      	ldr	r0, [pc, #420]	; (8005ce8 <main+0x824>)
 8005b42:	f7ff faed 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005b46:	4603      	mov	r3, r0
 8005b48:	019b      	lsls	r3, r3, #6
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_10)<<7 |
 8005b4a:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_4)<<5 |
 8005b4c:	2110      	movs	r1, #16
 8005b4e:	4866      	ldr	r0, [pc, #408]	; (8005ce8 <main+0x824>)
 8005b50:	f7ff fae6 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005b54:	4603      	mov	r3, r0
 8005b56:	015b      	lsls	r3, r3, #5
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_5)<<6 |
 8005b58:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_15)<<4 |
 8005b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b5e:	4861      	ldr	r0, [pc, #388]	; (8005ce4 <main+0x820>)
 8005b60:	f7ff fade 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005b64:	4603      	mov	r3, r0
 8005b66:	011b      	lsls	r3, r3, #4
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_4)<<5 |
 8005b68:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOC, LL_GPIO_PIN_15)<<3 |
 8005b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b6e:	485f      	ldr	r0, [pc, #380]	; (8005cec <main+0x828>)
 8005b70:	f7ff fad6 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005b74:	4603      	mov	r3, r0
 8005b76:	00db      	lsls	r3, r3, #3
				LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_15)<<4 |
 8005b78:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOC, LL_GPIO_PIN_14)<<2 |
 8005b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b7e:	485b      	ldr	r0, [pc, #364]	; (8005cec <main+0x828>)
 8005b80:	f7ff face 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005b84:	4603      	mov	r3, r0
 8005b86:	009b      	lsls	r3, r3, #2
				LL_GPIO_IsInputPinSet (GPIOC, LL_GPIO_PIN_15)<<3 |
 8005b88:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_15)<<1 |
 8005b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b8e:	4856      	ldr	r0, [pc, #344]	; (8005ce8 <main+0x824>)
 8005b90:	f7ff fac6 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005b94:	4603      	mov	r3, r0
 8005b96:	005b      	lsls	r3, r3, #1
				LL_GPIO_IsInputPinSet (GPIOC, LL_GPIO_PIN_14)<<2 |
 8005b98:	431c      	orrs	r4, r3
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_14));
 8005b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b9e:	4852      	ldr	r0, [pc, #328]	; (8005ce8 <main+0x824>)
 8005ba0:	f7ff fabe 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005ba4:	4603      	mov	r3, r0
				LL_GPIO_IsInputPinSet (GPIOB, LL_GPIO_PIN_15)<<1 |
 8005ba6:	4323      	orrs	r3, r4
		txSwitchesByte2 |= (
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

		/* set fast solenoids (controlled solenoids by stwitch) */

		/* right flipper Button pressed and enabled, don't use
		 * txSwitchesByte1 here (as they stay 1 until transferred to Pi) */
		if ( (LL_GPIO_IsInputPinSet (GPIOA, LL_GPIO_PIN_15)) && ((rxBuffer[1]>>7)&1) )
 8005bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bb8:	484a      	ldr	r0, [pc, #296]	; (8005ce4 <main+0x820>)
 8005bba:	f7ff fab1 	bl	8005120 <LL_GPIO_IsInputPinSet>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00d      	beq.n	8005be0 <main+0x71c>
 8005bc4:	4b4a      	ldr	r3, [pc, #296]	; (8005cf0 <main+0x82c>)
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	09db      	lsrs	r3, r3, #7
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <main+0x71c>
		{
			LL_TIM_CC_EnableChannel (TIM4, LL_TIM_CHANNEL_CH3);
 8005bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bd8:	4846      	ldr	r0, [pc, #280]	; (8005cf4 <main+0x830>)
 8005bda:	f7ff f909 	bl	8004df0 <LL_TIM_CC_EnableChannel>
 8005bde:	e00a      	b.n	8005bf6 <main+0x732>
		}
		else
		{
			if (flipperPulse > 420000) /* minimum on time is 5 ms to debounce flipper button (if it bounces the flipper doesn't get full power) */
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	4a45      	ldr	r2, [pc, #276]	; (8005cf8 <main+0x834>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d906      	bls.n	8005bf6 <main+0x732>
			{
				LL_TIM_CC_DisableChannel (TIM4, LL_TIM_CHANNEL_CH3);
 8005be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bec:	4841      	ldr	r0, [pc, #260]	; (8005cf4 <main+0x830>)
 8005bee:	f7ff f910 	bl	8004e12 <LL_TIM_CC_DisableChannel>
				flipperPulse = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
			}
		}
		if ( LL_TIM_CC_IsEnabledChannel(TIM4, LL_TIM_CHANNEL_CH3) ) flipperPulse += stTicks;
 8005bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bfa:	483e      	ldr	r0, [pc, #248]	; (8005cf4 <main+0x830>)
 8005bfc:	f7ff f91b 	bl	8004e36 <LL_TIM_CC_IsEnabledChannel>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <main+0x74a>
 8005c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	4413      	add	r3, r2
 8005c0c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* send status to Pi, currently only switch states */
		if ( nodeStatus == 1 )
 8005c0e:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <main+0x838>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d14a      	bne.n	8005cac <main+0x7e8>
		{
			/* wait a little (minimum half a bit with) to be sure that TransmitComplete of previous node is done and RS485 bus is free */
			if ( readyToSendCounter > 4200 ) /* 50 µs @ 84 MHz */
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	f241 0268 	movw	r2, #4200	; 0x1068
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d935      	bls.n	8005c8c <main+0x7c8>
			{
				if ( LL_USART_IsActiveFlag_TXE(USART1) && (!txByte1_transmitted) )
 8005c20:	4837      	ldr	r0, [pc, #220]	; (8005d00 <main+0x83c>)
 8005c22:	f7ff fa15 	bl	8005050 <LL_USART_IsActiveFlag_TXE>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d011      	beq.n	8005c50 <main+0x78c>
 8005c2c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10d      	bne.n	8005c50 <main+0x78c>
				{
					LL_GPIO_SetOutputPin (GPIOA, RS485_nWrite_Pin);
 8005c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c38:	482a      	ldr	r0, [pc, #168]	; (8005ce4 <main+0x820>)
 8005c3a:	f7ff fa86 	bl	800514a <LL_GPIO_SetOutputPin>
					LL_USART_TransmitData8 (USART1, txSwitchesByte1);
 8005c3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005c42:	4619      	mov	r1, r3
 8005c44:	482e      	ldr	r0, [pc, #184]	; (8005d00 <main+0x83c>)
 8005c46:	f7ff fa5c 	bl	8005102 <LL_USART_TransmitData8>
					txByte1_transmitted = 1;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				}
				if ( LL_USART_IsActiveFlag_TXE(USART1) && txByte1_transmitted ) {
 8005c50:	482b      	ldr	r0, [pc, #172]	; (8005d00 <main+0x83c>)
 8005c52:	f7ff f9fd 	bl	8005050 <LL_USART_IsActiveFlag_TXE>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d017      	beq.n	8005c8c <main+0x7c8>
 8005c5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d013      	beq.n	8005c8c <main+0x7c8>
						LL_USART_TransmitData8 (USART1, txSwitchesByte2);
 8005c64:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4825      	ldr	r0, [pc, #148]	; (8005d00 <main+0x83c>)
 8005c6c:	f7ff fa49 	bl	8005102 <LL_USART_TransmitData8>
						nodeStatus = 0;
 8005c70:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <main+0x838>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]
						txByte1_transmitted = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						readyToSendCounter = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
						txSwitchesByte1 = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						txSwitchesByte2 = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				}
			}
			readyToSendCounter += stTicks;
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	4413      	add	r3, r2
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Timeout sendStatus after 5 ms @ 84 MHz */
			if ( readyToSendCounter > 420000 )
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <main+0x834>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d907      	bls.n	8005cac <main+0x7e8>
			{
				nodeStatus = 0;
 8005c9c:	4b17      	ldr	r3, [pc, #92]	; (8005cfc <main+0x838>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
				readyToSendCounter = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
				txByte1_transmitted = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			}
		}

		prevTxSwitchByte1 = txSwitchesByte1;
 8005cac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005cb0:	73fb      	strb	r3, [r7, #15]
		prevTxSwitchByte2 = txSwitchesByte2;
 8005cb2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005cb6:	73bb      	strb	r3, [r7, #14]

		/* Paketintervall-Überwachung*/
		packetWatchDog += stTicks;
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	4413      	add	r3, r2
 8005cbe:	623b      	str	r3, [r7, #32]
		/* toggle LED after 4 seconds */
		if ( packetWatchDog > 336000000 ) LL_GPIO_TogglePin (GPIOC, LL_GPIO_PIN_13);
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <main+0x840>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d904      	bls.n	8005cd2 <main+0x80e>
 8005cc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ccc:	4807      	ldr	r0, [pc, #28]	; (8005cec <main+0x828>)
 8005cce:	f7ff fa59 	bl	8005184 <LL_GPIO_TogglePin>
		/* Timeout WatchDog: 5 s @ 84 MHz */
		if ( packetWatchDog > 420000000 )
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	4a0c      	ldr	r2, [pc, #48]	; (8005d08 <main+0x844>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f67f ac72 	bls.w	80055c0 <main+0xfc>
		{
			NVIC_SystemReset();
 8005cdc:	f7fe fca4 	bl	8004628 <__NVIC_SystemReset>
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40020000 	.word	0x40020000
 8005ce8:	40020400 	.word	0x40020400
 8005cec:	40020800 	.word	0x40020800
 8005cf0:	20000140 	.word	0x20000140
 8005cf4:	40000800 	.word	0x40000800
 8005cf8:	000668a0 	.word	0x000668a0
 8005cfc:	20000151 	.word	0x20000151
 8005d00:	40011000 	.word	0x40011000
 8005d04:	1406f400 	.word	0x1406f400
 8005d08:	1908b100 	.word	0x1908b100

08005d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8005d10:	2002      	movs	r0, #2
 8005d12:	f7fe fff9 	bl	8004d08 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8005d16:	bf00      	nop
 8005d18:	f7ff f80a 	bl	8004d30 <LL_FLASH_GetLatency>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d1fa      	bne.n	8005d18 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8005d22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005d26:	f7ff f811 	bl	8004d4c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8005d2a:	f7fe fec3 	bl	8004ab4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8005d2e:	bf00      	nop
 8005d30:	f7fe fed0 	bl	8004ad4 <LL_RCC_HSE_IsReady>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d1fa      	bne.n	8005d30 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_25, 168, LL_RCC_PLLP_DIV_2);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	22a8      	movs	r2, #168	; 0xa8
 8005d3e:	2119      	movs	r1, #25
 8005d40:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005d44:	f7fe ff72 	bl	8004c2c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8005d48:	f7fe ff4c 	bl	8004be4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8005d4c:	bf00      	nop
 8005d4e:	f7fe ff59 	bl	8004c04 <LL_RCC_PLL_IsReady>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d1fa      	bne.n	8005d4e <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8005d58:	2000      	movs	r0, #0
 8005d5a:	f7fe fef1 	bl	8004b40 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8005d5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005d62:	f7fe ff01 	bl	8004b68 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8005d66:	2000      	movs	r0, #0
 8005d68:	f7fe ff12 	bl	8004b90 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8005d6c:	2002      	movs	r0, #2
 8005d6e:	f7fe fec5 	bl	8004afc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005d72:	bf00      	nop
 8005d74:	f7fe fed6 	bl	8004b24 <LL_RCC_GetSysClkSource>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d1fa      	bne.n	8005d74 <SystemClock_Config+0x68>
  {

  }
  LL_SetSystemCoreClock(84000000);
 8005d7e:	4808      	ldr	r0, [pc, #32]	; (8005da0 <SystemClock_Config+0x94>)
 8005d80:	f002 f8a8 	bl	8007ed4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8005d84:	200f      	movs	r0, #15
 8005d86:	f000 fd97 	bl	80068b8 <HAL_InitTick>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8005d90:	f000 fbd8 	bl	8006544 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8005d94:	2000      	movs	r0, #0
 8005d96:	f7fe ff0f 	bl	8004bb8 <LL_RCC_SetTIMPrescaler>
}
 8005d9a:	bf00      	nop
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	0501bd00 	.word	0x0501bd00

08005da4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <MX_CRC_Init+0x20>)
 8005daa:	4a07      	ldr	r2, [pc, #28]	; (8005dc8 <MX_CRC_Init+0x24>)
 8005dac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005dae:	4805      	ldr	r0, [pc, #20]	; (8005dc4 <MX_CRC_Init+0x20>)
 8005db0:	f000 fedb 	bl	8006b6a <HAL_CRC_Init>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8005dba:	f000 fbc3 	bl	8006544 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005dbe:	bf00      	nop
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200000f8 	.word	0x200000f8
 8005dc8:	40023000 	.word	0x40023000

08005dcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b09a      	sub	sp, #104	; 0x68
 8005dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005dd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
 8005dde:	60da      	str	r2, [r3, #12]
 8005de0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005de2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005de6:	2220      	movs	r2, #32
 8005de8:	2100      	movs	r1, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f002 f8a6 	bl	8007f3c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005df0:	f107 031c 	add.w	r3, r7, #28
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	611a      	str	r2, [r3, #16]
 8005e00:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e02:	1d3b      	adds	r3, r7, #4
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	611a      	str	r2, [r3, #16]
 8005e10:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005e12:	2001      	movs	r0, #1
 8005e14:	f7fe ff60 	bl	8004cd8 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 65535;
 8005e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e26:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005e30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e34:	4619      	mov	r1, r3
 8005e36:	4830      	ldr	r0, [pc, #192]	; (8005ef8 <MX_TIM1_Init+0x12c>)
 8005e38:	f001 fb8e 	bl	8007558 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8005e3c:	482e      	ldr	r0, [pc, #184]	; (8005ef8 <MX_TIM1_Init+0x12c>)
 8005e3e:	f7fe ffb9 	bl	8004db4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005e42:	2100      	movs	r1, #0
 8005e44:	482c      	ldr	r0, [pc, #176]	; (8005ef8 <MX_TIM1_Init+0x12c>)
 8005e46:	f7ff f895 	bl	8004f74 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8005e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e4e:	482a      	ldr	r0, [pc, #168]	; (8005ef8 <MX_TIM1_Init+0x12c>)
 8005e50:	f7ff f84c 	bl	8004eec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005e54:	2360      	movs	r3, #96	; 0x60
 8005e56:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005e64:	2300      	movs	r3, #0
 8005e66:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005e70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e74:	461a      	mov	r2, r3
 8005e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e7a:	481f      	ldr	r0, [pc, #124]	; (8005ef8 <MX_TIM1_Init+0x12c>)
 8005e7c:	f001 fbe6 	bl	800764c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8005e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e84:	481c      	ldr	r0, [pc, #112]	; (8005ef8 <MX_TIM1_Init+0x12c>)
 8005e86:	f7fe ffeb 	bl	8004e60 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	481a      	ldr	r0, [pc, #104]	; (8005ef8 <MX_TIM1_Init+0x12c>)
 8005e8e:	f7ff f886 	bl	8004f9e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005e92:	4819      	ldr	r0, [pc, #100]	; (8005ef8 <MX_TIM1_Init+0x12c>)
 8005e94:	f7ff f896 	bl	8004fc4 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8005eb8:	f107 031c 	add.w	r3, r7, #28
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	480e      	ldr	r0, [pc, #56]	; (8005ef8 <MX_TIM1_Init+0x12c>)
 8005ec0:	f001 fc05 	bl	80076ce <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	f7fe fed7 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA11   ------> TIM1_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8005eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ece:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4804      	ldr	r0, [pc, #16]	; (8005efc <MX_TIM1_Init+0x130>)
 8005eea:	f001 f916 	bl	800711a <LL_GPIO_Init>

}
 8005eee:	bf00      	nop
 8005ef0:	3768      	adds	r7, #104	; 0x68
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40010000 	.word	0x40010000
 8005efc:	40020000 	.word	0x40020000

08005f00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b094      	sub	sp, #80	; 0x50
 8005f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005f06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	605a      	str	r2, [r3, #4]
 8005f10:	609a      	str	r2, [r3, #8]
 8005f12:	60da      	str	r2, [r3, #12]
 8005f14:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005f16:	f107 031c 	add.w	r3, r7, #28
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f002 f80c 	bl	8007f3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f24:	1d3b      	adds	r3, r7, #4
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	609a      	str	r2, [r3, #8]
 8005f2e:	60da      	str	r2, [r3, #12]
 8005f30:	611a      	str	r2, [r3, #16]
 8005f32:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8005f34:	2001      	movs	r0, #1
 8005f36:	f7fe feb7 	bl	8004ca8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 DMA Init */

  /* TIM2_CH2_CH4 Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_3);
 8005f3a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005f3e:	2106      	movs	r1, #6
 8005f40:	484f      	ldr	r0, [pc, #316]	; (8006080 <MX_TIM2_Init+0x180>)
 8005f42:	f7fe fce7 	bl	8004914 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8005f46:	2240      	movs	r2, #64	; 0x40
 8005f48:	2106      	movs	r1, #6
 8005f4a:	484d      	ldr	r0, [pc, #308]	; (8006080 <MX_TIM2_Init+0x180>)
 8005f4c:	f7fe fbc2 	bl	80046d4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_HIGH);
 8005f50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f54:	2106      	movs	r1, #6
 8005f56:	484a      	ldr	r0, [pc, #296]	; (8006080 <MX_TIM2_Init+0x180>)
 8005f58:	f7fe fc94 	bl	8004884 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_CIRCULAR);
 8005f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f60:	2106      	movs	r1, #6
 8005f62:	4847      	ldr	r0, [pc, #284]	; (8006080 <MX_TIM2_Init+0x180>)
 8005f64:	f7fe fbda 	bl	800471c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2106      	movs	r1, #6
 8005f6c:	4844      	ldr	r0, [pc, #272]	; (8006080 <MX_TIM2_Init+0x180>)
 8005f6e:	f7fe fbf9 	bl	8004764 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8005f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f76:	2106      	movs	r1, #6
 8005f78:	4841      	ldr	r0, [pc, #260]	; (8006080 <MX_TIM2_Init+0x180>)
 8005f7a:	f7fe fc17 	bl	80047ac <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_WORD);
 8005f7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f82:	2106      	movs	r1, #6
 8005f84:	483e      	ldr	r0, [pc, #248]	; (8006080 <MX_TIM2_Init+0x180>)
 8005f86:	f7fe fc35 	bl	80047f4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_WORD);
 8005f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f8e:	2106      	movs	r1, #6
 8005f90:	483b      	ldr	r0, [pc, #236]	; (8006080 <MX_TIM2_Init+0x180>)
 8005f92:	f7fe fc53 	bl	800483c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8005f96:	2106      	movs	r1, #6
 8005f98:	4839      	ldr	r0, [pc, #228]	; (8006080 <MX_TIM2_Init+0x180>)
 8005f9a:	f7fe fcdf 	bl	800495c <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_6, (uint32_t)&TIM2->CCR2);
 8005f9e:	4a39      	ldr	r2, [pc, #228]	; (8006084 <MX_TIM2_Init+0x184>)
 8005fa0:	2106      	movs	r1, #6
 8005fa2:	4837      	ldr	r0, [pc, #220]	; (8006080 <MX_TIM2_Init+0x180>)
 8005fa4:	f7fe fd12 	bl	80049cc <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_6, (uint32_t)tmp_led_data);
 8005fa8:	4b37      	ldr	r3, [pc, #220]	; (8006088 <MX_TIM2_Init+0x188>)
 8005faa:	461a      	mov	r2, r3
 8005fac:	2106      	movs	r1, #6
 8005fae:	4834      	ldr	r0, [pc, #208]	; (8006080 <MX_TIM2_Init+0x180>)
 8005fb0:	f7fe fcf4 	bl	800499c <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, 2*3*8);
 8005fb4:	2230      	movs	r2, #48	; 0x30
 8005fb6:	2106      	movs	r1, #6
 8005fb8:	4831      	ldr	r0, [pc, #196]	; (8006080 <MX_TIM2_Init+0x180>)
 8005fba:	f7fe fc87 	bl	80048cc <LL_DMA_SetDataLength>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_6);
 8005fbe:	2106      	movs	r1, #6
 8005fc0:	482f      	ldr	r0, [pc, #188]	; (8006080 <MX_TIM2_Init+0x180>)
 8005fc2:	f7fe fd57 	bl	8004a74 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_STREAM_6);
 8005fc6:	2106      	movs	r1, #6
 8005fc8:	482d      	ldr	r0, [pc, #180]	; (8006080 <MX_TIM2_Init+0x180>)
 8005fca:	f7fe fd33 	bl	8004a34 <LL_DMA_EnableIT_HT>


  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 104;
 8005fd6:	2368      	movs	r3, #104	; 0x68
 8005fd8:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8005fde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005fe8:	f001 fab6 	bl	8007558 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8005fec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005ff0:	f7fe fee0 	bl	8004db4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005ffa:	f7fe ffbb 	bl	8004f74 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8005ffe:	2110      	movs	r1, #16
 8006000:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006004:	f7fe ff72 	bl	8004eec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8006008:	2360      	movs	r3, #96	; 0x60
 800600a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800600c:	2300      	movs	r3, #0
 800600e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8006010:	2300      	movs	r3, #0
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8006018:	2300      	movs	r3, #0
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800601c:	f107 031c 	add.w	r3, r7, #28
 8006020:	461a      	mov	r2, r3
 8006022:	2110      	movs	r1, #16
 8006024:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006028:	f001 fb10 	bl	800764c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 800602c:	2110      	movs	r1, #16
 800602e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006032:	f7fe ff15 	bl	8004e60 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8006036:	2100      	movs	r1, #0
 8006038:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800603c:	f7fe ffaf 	bl	8004f9e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8006040:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006044:	f7fe ffbe 	bl	8004fc4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_EnableDMAReq_CC2(TIM2);              /* Enable DMA requests */
 8006048:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800604c:	f7fe ffca 	bl	8004fe4 <LL_TIM_EnableDMAReq_CC2>


  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006050:	2002      	movs	r0, #2
 8006052:	f7fe fe11 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8006056:	2308      	movs	r3, #8
 8006058:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800605a:	2302      	movs	r3, #2
 800605c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800606a:	2301      	movs	r3, #1
 800606c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800606e:	1d3b      	adds	r3, r7, #4
 8006070:	4619      	mov	r1, r3
 8006072:	4806      	ldr	r0, [pc, #24]	; (800608c <MX_TIM2_Init+0x18c>)
 8006074:	f001 f851 	bl	800711a <LL_GPIO_Init>

}
 8006078:	bf00      	nop
 800607a:	3750      	adds	r7, #80	; 0x50
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40026000 	.word	0x40026000
 8006084:	40000038 	.word	0x40000038
 8006088:	2000002c 	.word	0x2000002c
 800608c:	40020400 	.word	0x40020400

08006090 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b094      	sub	sp, #80	; 0x50
 8006094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8006096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	609a      	str	r2, [r3, #8]
 80060a2:	60da      	str	r2, [r3, #12]
 80060a4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80060a6:	f107 031c 	add.w	r3, r7, #28
 80060aa:	2220      	movs	r2, #32
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f001 ff44 	bl	8007f3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	609a      	str	r2, [r3, #8]
 80060be:	60da      	str	r2, [r3, #12]
 80060c0:	611a      	str	r2, [r3, #16]
 80060c2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80060c4:	2002      	movs	r0, #2
 80060c6:	f7fe fdef 	bl	8004ca8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 16;
 80060ca:	2310      	movs	r3, #16
 80060cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80060ce:	2300      	movs	r3, #0
 80060d0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 10000;
 80060d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80060d6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80060d8:	2300      	movs	r3, #0
 80060da:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80060dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80060e0:	4619      	mov	r1, r3
 80060e2:	4845      	ldr	r0, [pc, #276]	; (80061f8 <MX_TIM3_Init+0x168>)
 80060e4:	f001 fa38 	bl	8007558 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80060e8:	4843      	ldr	r0, [pc, #268]	; (80061f8 <MX_TIM3_Init+0x168>)
 80060ea:	f7fe fe63 	bl	8004db4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80060ee:	2100      	movs	r1, #0
 80060f0:	4841      	ldr	r0, [pc, #260]	; (80061f8 <MX_TIM3_Init+0x168>)
 80060f2:	f7fe ff3f 	bl	8004f74 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80060f6:	2101      	movs	r1, #1
 80060f8:	483f      	ldr	r0, [pc, #252]	; (80061f8 <MX_TIM3_Init+0x168>)
 80060fa:	f7fe fef7 	bl	8004eec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80060fe:	2360      	movs	r3, #96	; 0x60
 8006100:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006102:	2300      	movs	r3, #0
 8006104:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8006106:	2300      	movs	r3, #0
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = SOLFORCE25;
 800610a:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8006110:	2300      	movs	r3, #0
 8006112:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8006114:	f107 031c 	add.w	r3, r7, #28
 8006118:	461a      	mov	r2, r3
 800611a:	2101      	movs	r1, #1
 800611c:	4836      	ldr	r0, [pc, #216]	; (80061f8 <MX_TIM3_Init+0x168>)
 800611e:	f001 fa95 	bl	800764c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8006122:	2101      	movs	r1, #1
 8006124:	4834      	ldr	r0, [pc, #208]	; (80061f8 <MX_TIM3_Init+0x168>)
 8006126:	f7fe fe9b 	bl	8004e60 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 800612a:	2110      	movs	r1, #16
 800612c:	4832      	ldr	r0, [pc, #200]	; (80061f8 <MX_TIM3_Init+0x168>)
 800612e:	f7fe fedd 	bl	8004eec <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8006132:	f107 031c 	add.w	r3, r7, #28
 8006136:	461a      	mov	r2, r3
 8006138:	2110      	movs	r1, #16
 800613a:	482f      	ldr	r0, [pc, #188]	; (80061f8 <MX_TIM3_Init+0x168>)
 800613c:	f001 fa86 	bl	800764c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8006140:	2110      	movs	r1, #16
 8006142:	482d      	ldr	r0, [pc, #180]	; (80061f8 <MX_TIM3_Init+0x168>)
 8006144:	f7fe fe8c 	bl	8004e60 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8006148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800614c:	482a      	ldr	r0, [pc, #168]	; (80061f8 <MX_TIM3_Init+0x168>)
 800614e:	f7fe fecd 	bl	8004eec <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8006152:	f107 031c 	add.w	r3, r7, #28
 8006156:	461a      	mov	r2, r3
 8006158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800615c:	4826      	ldr	r0, [pc, #152]	; (80061f8 <MX_TIM3_Init+0x168>)
 800615e:	f001 fa75 	bl	800764c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8006162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006166:	4824      	ldr	r0, [pc, #144]	; (80061f8 <MX_TIM3_Init+0x168>)
 8006168:	f7fe fe7a 	bl	8004e60 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800616c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006170:	4821      	ldr	r0, [pc, #132]	; (80061f8 <MX_TIM3_Init+0x168>)
 8006172:	f7fe febb 	bl	8004eec <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8006176:	f107 031c 	add.w	r3, r7, #28
 800617a:	461a      	mov	r2, r3
 800617c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006180:	481d      	ldr	r0, [pc, #116]	; (80061f8 <MX_TIM3_Init+0x168>)
 8006182:	f001 fa63 	bl	800764c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8006186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800618a:	481b      	ldr	r0, [pc, #108]	; (80061f8 <MX_TIM3_Init+0x168>)
 800618c:	f7fe fe68 	bl	8004e60 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8006190:	2100      	movs	r1, #0
 8006192:	4819      	ldr	r0, [pc, #100]	; (80061f8 <MX_TIM3_Init+0x168>)
 8006194:	f7fe ff03 	bl	8004f9e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8006198:	4817      	ldr	r0, [pc, #92]	; (80061f8 <MX_TIM3_Init+0x168>)
 800619a:	f7fe ff13 	bl	8004fc4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800619e:	2001      	movs	r0, #1
 80061a0:	f7fe fd6a 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80061a4:	2002      	movs	r0, #2
 80061a6:	f7fe fd67 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>
  PA6   ------> TIM3_CH1
  PA7   ------> TIM3_CH2
  PB0   ------> TIM3_CH3
  PB1   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80061aa:	23c0      	movs	r3, #192	; 0xc0
 80061ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80061ae:	2302      	movs	r3, #2
 80061b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80061be:	2302      	movs	r3, #2
 80061c0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061c2:	1d3b      	adds	r3, r7, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	480d      	ldr	r0, [pc, #52]	; (80061fc <MX_TIM3_Init+0x16c>)
 80061c8:	f000 ffa7 	bl	800711a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80061cc:	2303      	movs	r3, #3
 80061ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80061d0:	2302      	movs	r3, #2
 80061d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80061e0:	2302      	movs	r3, #2
 80061e2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061e4:	1d3b      	adds	r3, r7, #4
 80061e6:	4619      	mov	r1, r3
 80061e8:	4805      	ldr	r0, [pc, #20]	; (8006200 <MX_TIM3_Init+0x170>)
 80061ea:	f000 ff96 	bl	800711a <LL_GPIO_Init>

}
 80061ee:	bf00      	nop
 80061f0:	3750      	adds	r7, #80	; 0x50
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40000400 	.word	0x40000400
 80061fc:	40020000 	.word	0x40020000
 8006200:	40020400 	.word	0x40020400

08006204 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b094      	sub	sp, #80	; 0x50
 8006208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800620a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	605a      	str	r2, [r3, #4]
 8006214:	609a      	str	r2, [r3, #8]
 8006216:	60da      	str	r2, [r3, #12]
 8006218:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800621a:	f107 031c 	add.w	r3, r7, #28
 800621e:	2220      	movs	r2, #32
 8006220:	2100      	movs	r1, #0
 8006222:	4618      	mov	r0, r3
 8006224:	f001 fe8a 	bl	8007f3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006228:	1d3b      	adds	r3, r7, #4
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	605a      	str	r2, [r3, #4]
 8006230:	609a      	str	r2, [r3, #8]
 8006232:	60da      	str	r2, [r3, #12]
 8006234:	611a      	str	r2, [r3, #16]
 8006236:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8006238:	2004      	movs	r0, #4
 800623a:	f7fe fd35 	bl	8004ca8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 16;
 800623e:	2310      	movs	r3, #16
 8006240:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006242:	2300      	movs	r3, #0
 8006244:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 10000;
 8006246:	f242 7310 	movw	r3, #10000	; 0x2710
 800624a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800624c:	2300      	movs	r3, #0
 800624e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8006250:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006254:	4619      	mov	r1, r3
 8006256:	483d      	ldr	r0, [pc, #244]	; (800634c <MX_TIM4_Init+0x148>)
 8006258:	f001 f97e 	bl	8007558 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800625c:	483b      	ldr	r0, [pc, #236]	; (800634c <MX_TIM4_Init+0x148>)
 800625e:	f7fe fda9 	bl	8004db4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8006262:	2100      	movs	r1, #0
 8006264:	4839      	ldr	r0, [pc, #228]	; (800634c <MX_TIM4_Init+0x148>)
 8006266:	f7fe fe85 	bl	8004f74 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 800626a:	2101      	movs	r1, #1
 800626c:	4837      	ldr	r0, [pc, #220]	; (800634c <MX_TIM4_Init+0x148>)
 800626e:	f7fe fe3d 	bl	8004eec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8006272:	2360      	movs	r3, #96	; 0x60
 8006274:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006276:	2300      	movs	r3, #0
 8006278:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800627a:	2300      	movs	r3, #0
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = SOLFORCE25;
 800627e:	f241 03cc 	movw	r3, #4300	; 0x10cc
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8006284:	2300      	movs	r3, #0
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8006288:	f107 031c 	add.w	r3, r7, #28
 800628c:	461a      	mov	r2, r3
 800628e:	2101      	movs	r1, #1
 8006290:	482e      	ldr	r0, [pc, #184]	; (800634c <MX_TIM4_Init+0x148>)
 8006292:	f001 f9db 	bl	800764c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8006296:	2101      	movs	r1, #1
 8006298:	482c      	ldr	r0, [pc, #176]	; (800634c <MX_TIM4_Init+0x148>)
 800629a:	f7fe fde1 	bl	8004e60 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 800629e:	2110      	movs	r1, #16
 80062a0:	482a      	ldr	r0, [pc, #168]	; (800634c <MX_TIM4_Init+0x148>)
 80062a2:	f7fe fe23 	bl	8004eec <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80062a6:	f107 031c 	add.w	r3, r7, #28
 80062aa:	461a      	mov	r2, r3
 80062ac:	2110      	movs	r1, #16
 80062ae:	4827      	ldr	r0, [pc, #156]	; (800634c <MX_TIM4_Init+0x148>)
 80062b0:	f001 f9cc 	bl	800764c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 80062b4:	2110      	movs	r1, #16
 80062b6:	4825      	ldr	r0, [pc, #148]	; (800634c <MX_TIM4_Init+0x148>)
 80062b8:	f7fe fdd2 	bl	8004e60 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 80062bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062c0:	4822      	ldr	r0, [pc, #136]	; (800634c <MX_TIM4_Init+0x148>)
 80062c2:	f7fe fe13 	bl	8004eec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = SOLFORCE50;
 80062c6:	f641 534c 	movw	r3, #7500	; 0x1d4c
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80062cc:	f107 031c 	add.w	r3, r7, #28
 80062d0:	461a      	mov	r2, r3
 80062d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062d6:	481d      	ldr	r0, [pc, #116]	; (800634c <MX_TIM4_Init+0x148>)
 80062d8:	f001 f9b8 	bl	800764c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 80062dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062e0:	481a      	ldr	r0, [pc, #104]	; (800634c <MX_TIM4_Init+0x148>)
 80062e2:	f7fe fdbd 	bl	8004e60 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 80062e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062ea:	4818      	ldr	r0, [pc, #96]	; (800634c <MX_TIM4_Init+0x148>)
 80062ec:	f7fe fdfe 	bl	8004eec <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80062f0:	f107 031c 	add.w	r3, r7, #28
 80062f4:	461a      	mov	r2, r3
 80062f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062fa:	4814      	ldr	r0, [pc, #80]	; (800634c <MX_TIM4_Init+0x148>)
 80062fc:	f001 f9a6 	bl	800764c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8006300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006304:	4811      	ldr	r0, [pc, #68]	; (800634c <MX_TIM4_Init+0x148>)
 8006306:	f7fe fdab 	bl	8004e60 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800630a:	2100      	movs	r1, #0
 800630c:	480f      	ldr	r0, [pc, #60]	; (800634c <MX_TIM4_Init+0x148>)
 800630e:	f7fe fe46 	bl	8004f9e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8006312:	480e      	ldr	r0, [pc, #56]	; (800634c <MX_TIM4_Init+0x148>)
 8006314:	f7fe fe56 	bl	8004fc4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006318:	2002      	movs	r0, #2
 800631a:	f7fe fcad 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  PB8   ------> TIM4_CH3
  PB9   ------> TIM4_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800631e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006322:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006324:	2302      	movs	r3, #2
 8006326:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006330:	2300      	movs	r3, #0
 8006332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8006334:	2302      	movs	r3, #2
 8006336:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006338:	1d3b      	adds	r3, r7, #4
 800633a:	4619      	mov	r1, r3
 800633c:	4804      	ldr	r0, [pc, #16]	; (8006350 <MX_TIM4_Init+0x14c>)
 800633e:	f000 feec 	bl	800711a <LL_GPIO_Init>

}
 8006342:	bf00      	nop
 8006344:	3750      	adds	r7, #80	; 0x50
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40000800 	.word	0x40000800
 8006350:	40020400 	.word	0x40020400

08006354 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08e      	sub	sp, #56	; 0x38
 8006358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800635a:	f107 031c 	add.w	r3, r7, #28
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	605a      	str	r2, [r3, #4]
 8006364:	609a      	str	r2, [r3, #8]
 8006366:	60da      	str	r2, [r3, #12]
 8006368:	611a      	str	r2, [r3, #16]
 800636a:	615a      	str	r2, [r3, #20]
 800636c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800636e:	1d3b      	adds	r3, r7, #4
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	611a      	str	r2, [r3, #16]
 800637c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800637e:	2010      	movs	r0, #16
 8006380:	f7fe fcaa 	bl	8004cd8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006384:	2001      	movs	r0, #1
 8006386:	f7fe fc77 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800638a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800638e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006390:	2302      	movs	r3, #2
 8006392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006394:	2303      	movs	r3, #3
 8006396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006398:	2300      	movs	r3, #0
 800639a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80063a0:	2307      	movs	r3, #7
 80063a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063a4:	1d3b      	adds	r3, r7, #4
 80063a6:	4619      	mov	r1, r3
 80063a8:	481b      	ldr	r0, [pc, #108]	; (8006418 <MX_USART1_UART_Init+0xc4>)
 80063aa:	f000 feb6 	bl	800711a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80063ae:	f7fe f88d 	bl	80044cc <__NVIC_GetPriorityGrouping>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2200      	movs	r2, #0
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fe f901 	bl	80045c0 <NVIC_EncodePriority>
 80063be:	4603      	mov	r3, r0
 80063c0:	4619      	mov	r1, r3
 80063c2:	2025      	movs	r0, #37	; 0x25
 80063c4:	f7fe f8d2 	bl	800456c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80063c8:	2025      	movs	r0, #37	; 0x25
 80063ca:	f7fe f88d 	bl	80044e8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80063ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80063d2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80063d4:	2300      	movs	r3, #0
 80063d6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80063d8:	2300      	movs	r3, #0
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80063dc:	2300      	movs	r3, #0
 80063de:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80063e0:	230c      	movs	r3, #12
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80063e8:	2300      	movs	r3, #0
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80063ec:	f107 031c 	add.w	r3, r7, #28
 80063f0:	4619      	mov	r1, r3
 80063f2:	480a      	ldr	r0, [pc, #40]	; (800641c <MX_USART1_UART_Init+0xc8>)
 80063f4:	f001 fd0a 	bl	8007e0c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80063f8:	4808      	ldr	r0, [pc, #32]	; (800641c <MX_USART1_UART_Init+0xc8>)
 80063fa:	f7fe fe13 	bl	8005024 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80063fe:	4807      	ldr	r0, [pc, #28]	; (800641c <MX_USART1_UART_Init+0xc8>)
 8006400:	f7fe fe00 	bl	8005004 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  LL_USART_EnableIT_RXNE (USART1);
 8006404:	4805      	ldr	r0, [pc, #20]	; (800641c <MX_USART1_UART_Init+0xc8>)
 8006406:	f7fe fe36 	bl	8005076 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_TC (USART1);
 800640a:	4804      	ldr	r0, [pc, #16]	; (800641c <MX_USART1_UART_Init+0xc8>)
 800640c:	f7fe fe56 	bl	80050bc <LL_USART_EnableIT_TC>


  /* USER CODE END USART1_Init 2 */

}
 8006410:	bf00      	nop
 8006412:	3738      	adds	r7, #56	; 0x38
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40020000 	.word	0x40020000
 800641c:	40011000 	.word	0x40011000

08006420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8006424:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006428:	f7fe fc26 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800642c:	f7fe f84e 	bl	80044cc <__NVIC_GetPriorityGrouping>
 8006430:	4603      	mov	r3, r0
 8006432:	2200      	movs	r2, #0
 8006434:	2100      	movs	r1, #0
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe f8c2 	bl	80045c0 <NVIC_EncodePriority>
 800643c:	4603      	mov	r3, r0
 800643e:	4619      	mov	r1, r3
 8006440:	2011      	movs	r0, #17
 8006442:	f7fe f893 	bl	800456c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8006446:	2011      	movs	r0, #17
 8006448:	f7fe f84e 	bl	80044e8 <__NVIC_EnableIRQ>

}
 800644c:	bf00      	nop
 800644e:	bd80      	pop	{r7, pc}

08006450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006456:	463b      	mov	r3, r7
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	609a      	str	r2, [r3, #8]
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	611a      	str	r2, [r3, #16]
 8006464:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006466:	2004      	movs	r0, #4
 8006468:	f7fe fc06 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800646c:	2080      	movs	r0, #128	; 0x80
 800646e:	f7fe fc03 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006472:	2001      	movs	r0, #1
 8006474:	f7fe fc00 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006478:	2002      	movs	r0, #2
 800647a:	f7fe fbfd 	bl	8004c78 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(BlueLED_GPIO_Port, BlueLED_Pin);
 800647e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006482:	482d      	ldr	r0, [pc, #180]	; (8006538 <MX_GPIO_Init+0xe8>)
 8006484:	f7fe fe6f 	bl	8005166 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RS485_nWrite_GPIO_Port, RS485_nWrite_Pin);
 8006488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800648c:	482b      	ldr	r0, [pc, #172]	; (800653c <MX_GPIO_Init+0xec>)
 800648e:	f7fe fe6a 	bl	8005166 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = BlueLED_Pin;
 8006492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006496:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006498:	2301      	movs	r3, #1
 800649a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800649c:	2300      	movs	r3, #0
 800649e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80064a4:	2300      	movs	r3, #0
 80064a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BlueLED_GPIO_Port, &GPIO_InitStruct);
 80064a8:	463b      	mov	r3, r7
 80064aa:	4619      	mov	r1, r3
 80064ac:	4822      	ldr	r0, [pc, #136]	; (8006538 <MX_GPIO_Init+0xe8>)
 80064ae:	f000 fe34 	bl	800711a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80064b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80064b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80064b8:	2300      	movs	r3, #0
 80064ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80064bc:	2301      	movs	r3, #1
 80064be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064c0:	463b      	mov	r3, r7
 80064c2:	4619      	mov	r1, r3
 80064c4:	481c      	ldr	r0, [pc, #112]	; (8006538 <MX_GPIO_Init+0xe8>)
 80064c6:	f000 fe28 	bl	800711a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KeySwitch_Pin;
 80064ca:	2301      	movs	r3, #1
 80064cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80064ce:	2300      	movs	r3, #0
 80064d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80064d2:	2300      	movs	r3, #0
 80064d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(KeySwitch_GPIO_Port, &GPIO_InitStruct);
 80064d6:	463b      	mov	r3, r7
 80064d8:	4619      	mov	r1, r3
 80064da:	4818      	ldr	r0, [pc, #96]	; (800653c <MX_GPIO_Init+0xec>)
 80064dc:	f000 fe1d 	bl	800711a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 80064e0:	f248 133e 	movw	r3, #33086	; 0x813e
 80064e4:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_8|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80064e6:	2300      	movs	r3, #0
 80064e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80064ea:	2301      	movs	r3, #1
 80064ec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ee:	463b      	mov	r3, r7
 80064f0:	4619      	mov	r1, r3
 80064f2:	4812      	ldr	r0, [pc, #72]	; (800653c <MX_GPIO_Init+0xec>)
 80064f4:	f000 fe11 	bl	800711a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14
 80064f8:	f24f 4330 	movw	r3, #62512	; 0xf430
 80064fc:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_15|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80064fe:	2300      	movs	r3, #0
 8006500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006502:	2301      	movs	r3, #1
 8006504:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006506:	463b      	mov	r3, r7
 8006508:	4619      	mov	r1, r3
 800650a:	480d      	ldr	r0, [pc, #52]	; (8006540 <MX_GPIO_Init+0xf0>)
 800650c:	f000 fe05 	bl	800711a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RS485_nWrite_Pin;
 8006510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006514:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006516:	2301      	movs	r3, #1
 8006518:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RS485_nWrite_GPIO_Port, &GPIO_InitStruct);
 8006526:	463b      	mov	r3, r7
 8006528:	4619      	mov	r1, r3
 800652a:	4804      	ldr	r0, [pc, #16]	; (800653c <MX_GPIO_Init+0xec>)
 800652c:	f000 fdf5 	bl	800711a <LL_GPIO_Init>

}
 8006530:	bf00      	nop
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40020800 	.word	0x40020800
 800653c:	40020000 	.word	0x40020000
 8006540:	40020400 	.word	0x40020400

08006544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006548:	b672      	cpsid	i
}
 800654a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800654c:	e7fe      	b.n	800654c <Error_Handler+0x8>
	...

08006550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006556:	2300      	movs	r3, #0
 8006558:	607b      	str	r3, [r7, #4]
 800655a:	4b10      	ldr	r3, [pc, #64]	; (800659c <HAL_MspInit+0x4c>)
 800655c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655e:	4a0f      	ldr	r2, [pc, #60]	; (800659c <HAL_MspInit+0x4c>)
 8006560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006564:	6453      	str	r3, [r2, #68]	; 0x44
 8006566:	4b0d      	ldr	r3, [pc, #52]	; (800659c <HAL_MspInit+0x4c>)
 8006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006572:	2300      	movs	r3, #0
 8006574:	603b      	str	r3, [r7, #0]
 8006576:	4b09      	ldr	r3, [pc, #36]	; (800659c <HAL_MspInit+0x4c>)
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	4a08      	ldr	r2, [pc, #32]	; (800659c <HAL_MspInit+0x4c>)
 800657c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006580:	6413      	str	r3, [r2, #64]	; 0x40
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <HAL_MspInit+0x4c>)
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40023800 	.word	0x40023800

080065a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a0b      	ldr	r2, [pc, #44]	; (80065dc <HAL_CRC_MspInit+0x3c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d10d      	bne.n	80065ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <HAL_CRC_MspInit+0x40>)
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <HAL_CRC_MspInit+0x40>)
 80065bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065c0:	6313      	str	r3, [r2, #48]	; 0x30
 80065c2:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <HAL_CRC_MspInit+0x40>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40023000 	.word	0x40023000
 80065e0:	40023800 	.word	0x40023800

080065e4 <LL_DMA_IsActiveFlag_HT6>:
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF6)==(DMA_HISR_HTIF6));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065f8:	bf0c      	ite	eq
 80065fa:	2301      	moveq	r3, #1
 80065fc:	2300      	movne	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <LL_DMA_IsActiveFlag_TC6>:
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800661c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006620:	bf0c      	ite	eq
 8006622:	2301      	moveq	r3, #1
 8006624:	2300      	movne	r3, #0
 8006626:	b2db      	uxtb	r3, r3
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <LL_DMA_ClearFlag_HT6>:
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006642:	60da      	str	r2, [r3, #12]
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <LL_DMA_ClearFlag_TC6>:
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800665e:	60da      	str	r2, [r3, #12]
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <LL_USART_IsActiveFlag_RXNE>:
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b20      	cmp	r3, #32
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <LL_USART_IsActiveFlag_TC>:
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	bf0c      	ite	eq
 80066a6:	2301      	moveq	r3, #1
 80066a8:	2300      	movne	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <LL_USART_ClearFlag_TC>:
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066c6:	601a      	str	r2, [r3, #0]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <LL_USART_ReceiveData8>:
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	b2db      	uxtb	r3, r3
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <LL_GPIO_ResetOutputPin>:
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	041a      	lsls	r2, r3, #16
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	619a      	str	r2, [r3, #24]
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006710:	e7fe      	b.n	8006710 <NMI_Handler+0x4>

08006712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006712:	b480      	push	{r7}
 8006714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006716:	e7fe      	b.n	8006716 <HardFault_Handler+0x4>

08006718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800671c:	e7fe      	b.n	800671c <MemManage_Handler+0x4>

0800671e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800671e:	b480      	push	{r7}
 8006720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006722:	e7fe      	b.n	8006722 <BusFault_Handler+0x4>

08006724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006728:	e7fe      	b.n	8006728 <UsageFault_Handler+0x4>

0800672a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800672a:	b480      	push	{r7}
 800672c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800672e:	bf00      	nop
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800673c:	bf00      	nop
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006746:	b480      	push	{r7}
 8006748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800674a:	bf00      	nop
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006758:	f000 f8de 	bl	8006918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800675c:	bf00      	nop
 800675e:	bd80      	pop	{r7, pc}

08006760 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
    if (LL_DMA_IsActiveFlag_HT6(DMA1)) {        /* Check for HT event */
 8006764:	480d      	ldr	r0, [pc, #52]	; (800679c <DMA1_Stream6_IRQHandler+0x3c>)
 8006766:	f7ff ff3d 	bl	80065e4 <LL_DMA_IsActiveFlag_HT6>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d006      	beq.n	800677e <DMA1_Stream6_IRQHandler+0x1e>
        LL_DMA_ClearFlag_HT6(DMA1);
 8006770:	480a      	ldr	r0, [pc, #40]	; (800679c <DMA1_Stream6_IRQHandler+0x3c>)
 8006772:	f7ff ff5f 	bl	8006634 <LL_DMA_ClearFlag_HT6>
        led_update_sequence(0);                 /* Call update sequence as HT event */
 8006776:	2000      	movs	r0, #0
 8006778:	f7fe fda6 	bl	80052c8 <led_update_sequence>
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800677c:	e00b      	b.n	8006796 <DMA1_Stream6_IRQHandler+0x36>
    } else if (LL_DMA_IsActiveFlag_TC6(DMA1)) { /* Check for TC event */
 800677e:	4807      	ldr	r0, [pc, #28]	; (800679c <DMA1_Stream6_IRQHandler+0x3c>)
 8006780:	f7ff ff44 	bl	800660c <LL_DMA_IsActiveFlag_TC6>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d005      	beq.n	8006796 <DMA1_Stream6_IRQHandler+0x36>
        LL_DMA_ClearFlag_TC6(DMA1);
 800678a:	4804      	ldr	r0, [pc, #16]	; (800679c <DMA1_Stream6_IRQHandler+0x3c>)
 800678c:	f7ff ff60 	bl	8006650 <LL_DMA_ClearFlag_TC6>
        led_update_sequence(1);                 /* Call update sequence as TC event */
 8006790:	2001      	movs	r0, #1
 8006792:	f7fe fd99 	bl	80052c8 <led_update_sequence>
}
 8006796:	bf00      	nop
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40026000 	.word	0x40026000

080067a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if (LL_USART_IsActiveFlag_TC (USART1)) {
 80067a4:	480f      	ldr	r0, [pc, #60]	; (80067e4 <USART1_IRQHandler+0x44>)
 80067a6:	f7ff ff74 	bl	8006692 <LL_USART_IsActiveFlag_TC>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d007      	beq.n	80067c0 <USART1_IRQHandler+0x20>
		LL_GPIO_ResetOutputPin (GPIOA, RS485_nWrite_Pin);
 80067b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067b4:	480c      	ldr	r0, [pc, #48]	; (80067e8 <USART1_IRQHandler+0x48>)
 80067b6:	f7ff ff9a 	bl	80066ee <LL_GPIO_ResetOutputPin>
		LL_USART_ClearFlag_TC (USART1);
 80067ba:	480a      	ldr	r0, [pc, #40]	; (80067e4 <USART1_IRQHandler+0x44>)
 80067bc:	f7ff ff7c 	bl	80066b8 <LL_USART_ClearFlag_TC>
	}
	if ( LL_USART_IsActiveFlag_RXNE(USART1) ) {
 80067c0:	4808      	ldr	r0, [pc, #32]	; (80067e4 <USART1_IRQHandler+0x44>)
 80067c2:	f7ff ff53 	bl	800666c <LL_USART_IsActiveFlag_RXNE>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d009      	beq.n	80067e0 <USART1_IRQHandler+0x40>
		currentRx = LL_USART_ReceiveData8 (USART1);
 80067cc:	4805      	ldr	r0, [pc, #20]	; (80067e4 <USART1_IRQHandler+0x44>)
 80067ce:	f7ff ff81 	bl	80066d4 <LL_USART_ReceiveData8>
 80067d2:	4603      	mov	r3, r0
 80067d4:	461a      	mov	r2, r3
 80067d6:	4b05      	ldr	r3, [pc, #20]	; (80067ec <USART1_IRQHandler+0x4c>)
 80067d8:	701a      	strb	r2, [r3, #0]
		dataArrived = 1;
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <USART1_IRQHandler+0x50>)
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80067e0:	bf00      	nop
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40011000 	.word	0x40011000
 80067e8:	40020000 	.word	0x40020000
 80067ec:	20000029 	.word	0x20000029
 80067f0:	20000028 	.word	0x20000028

080067f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <SystemInit+0x24>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fe:	4a06      	ldr	r2, [pc, #24]	; (8006818 <SystemInit+0x24>)
 8006800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8006808:	4b03      	ldr	r3, [pc, #12]	; (8006818 <SystemInit+0x24>)
 800680a:	4a04      	ldr	r2, [pc, #16]	; (800681c <SystemInit+0x28>)
 800680c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800680e:	bf00      	nop
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	e000ed00 	.word	0xe000ed00
 800681c:	08004000 	.word	0x08004000

08006820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006858 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006824:	480d      	ldr	r0, [pc, #52]	; (800685c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006826:	490e      	ldr	r1, [pc, #56]	; (8006860 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006828:	4a0e      	ldr	r2, [pc, #56]	; (8006864 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800682a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800682c:	e002      	b.n	8006834 <LoopCopyDataInit>

0800682e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800682e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006832:	3304      	adds	r3, #4

08006834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006838:	d3f9      	bcc.n	800682e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800683a:	4a0b      	ldr	r2, [pc, #44]	; (8006868 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800683c:	4c0b      	ldr	r4, [pc, #44]	; (800686c <LoopFillZerobss+0x26>)
  movs r3, #0
 800683e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006840:	e001      	b.n	8006846 <LoopFillZerobss>

08006842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006844:	3204      	adds	r2, #4

08006846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006848:	d3fb      	bcc.n	8006842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800684a:	f7ff ffd3 	bl	80067f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800684e:	f001 fb51 	bl	8007ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006852:	f7fe fe37 	bl	80054c4 <main>
  bx  lr    
 8006856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006858:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800685c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006860:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8006864:	08007fa4 	.word	0x08007fa4
  ldr r2, =_sbss
 8006868:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800686c:	20000178 	.word	0x20000178

08006870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006870:	e7fe      	b.n	8006870 <ADC_IRQHandler>
	...

08006874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006878:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <HAL_Init+0x40>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a0d      	ldr	r2, [pc, #52]	; (80068b4 <HAL_Init+0x40>)
 800687e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006884:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <HAL_Init+0x40>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a0a      	ldr	r2, [pc, #40]	; (80068b4 <HAL_Init+0x40>)
 800688a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800688e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006890:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <HAL_Init+0x40>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a07      	ldr	r2, [pc, #28]	; (80068b4 <HAL_Init+0x40>)
 8006896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800689c:	2003      	movs	r0, #3
 800689e:	f000 f931 	bl	8006b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068a2:	200f      	movs	r0, #15
 80068a4:	f000 f808 	bl	80068b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068a8:	f7ff fe52 	bl	8006550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	40023c00 	.word	0x40023c00

080068b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80068c0:	4b12      	ldr	r3, [pc, #72]	; (800690c <HAL_InitTick+0x54>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	4b12      	ldr	r3, [pc, #72]	; (8006910 <HAL_InitTick+0x58>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	4619      	mov	r1, r3
 80068ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80068d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 f93b 	bl	8006b52 <HAL_SYSTICK_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e00e      	b.n	8006904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b0f      	cmp	r3, #15
 80068ea:	d80a      	bhi.n	8006902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068ec:	2200      	movs	r2, #0
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068f4:	f000 f911 	bl	8006b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068f8:	4a06      	ldr	r2, [pc, #24]	; (8006914 <HAL_InitTick+0x5c>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	e000      	b.n	8006904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000000 	.word	0x20000000
 8006910:	20000008 	.word	0x20000008
 8006914:	20000004 	.word	0x20000004

08006918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800691c:	4b06      	ldr	r3, [pc, #24]	; (8006938 <HAL_IncTick+0x20>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <HAL_IncTick+0x24>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4413      	add	r3, r2
 8006928:	4a04      	ldr	r2, [pc, #16]	; (800693c <HAL_IncTick+0x24>)
 800692a:	6013      	str	r3, [r2, #0]
}
 800692c:	bf00      	nop
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	20000008 	.word	0x20000008
 800693c:	20000154 	.word	0x20000154

08006940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  return uwTick;
 8006944:	4b03      	ldr	r3, [pc, #12]	; (8006954 <HAL_GetTick+0x14>)
 8006946:	681b      	ldr	r3, [r3, #0]
}
 8006948:	4618      	mov	r0, r3
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000154 	.word	0x20000154

08006958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006960:	f7ff ffee 	bl	8006940 <HAL_GetTick>
 8006964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006970:	d005      	beq.n	800697e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006972:	4b0a      	ldr	r3, [pc, #40]	; (800699c <HAL_Delay+0x44>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800697e:	bf00      	nop
 8006980:	f7ff ffde 	bl	8006940 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	429a      	cmp	r2, r3
 800698e:	d8f7      	bhi.n	8006980 <HAL_Delay+0x28>
  {
  }
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000008 	.word	0x20000008

080069a0 <__NVIC_SetPriorityGrouping>:
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069b0:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <__NVIC_SetPriorityGrouping+0x44>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069bc:	4013      	ands	r3, r2
 80069be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069d2:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <__NVIC_SetPriorityGrouping+0x44>)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	60d3      	str	r3, [r2, #12]
}
 80069d8:	bf00      	nop
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	e000ed00 	.word	0xe000ed00

080069e8 <__NVIC_GetPriorityGrouping>:
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <__NVIC_GetPriorityGrouping+0x18>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	0a1b      	lsrs	r3, r3, #8
 80069f2:	f003 0307 	and.w	r3, r3, #7
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	e000ed00 	.word	0xe000ed00

08006a04 <__NVIC_SetPriority>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	6039      	str	r1, [r7, #0]
 8006a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db0a      	blt.n	8006a2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	490c      	ldr	r1, [pc, #48]	; (8006a50 <__NVIC_SetPriority+0x4c>)
 8006a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a22:	0112      	lsls	r2, r2, #4
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	440b      	add	r3, r1
 8006a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a2c:	e00a      	b.n	8006a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	4908      	ldr	r1, [pc, #32]	; (8006a54 <__NVIC_SetPriority+0x50>)
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	3b04      	subs	r3, #4
 8006a3c:	0112      	lsls	r2, r2, #4
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	440b      	add	r3, r1
 8006a42:	761a      	strb	r2, [r3, #24]
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	e000e100 	.word	0xe000e100
 8006a54:	e000ed00 	.word	0xe000ed00

08006a58 <NVIC_EncodePriority>:
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b089      	sub	sp, #36	; 0x24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f1c3 0307 	rsb	r3, r3, #7
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	bf28      	it	cs
 8006a76:	2304      	movcs	r3, #4
 8006a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	2b06      	cmp	r3, #6
 8006a80:	d902      	bls.n	8006a88 <NVIC_EncodePriority+0x30>
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	3b03      	subs	r3, #3
 8006a86:	e000      	b.n	8006a8a <NVIC_EncodePriority+0x32>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43da      	mvns	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aaa:	43d9      	mvns	r1, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ab0:	4313      	orrs	r3, r2
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3724      	adds	r7, #36	; 0x24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
	...

08006ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ad0:	d301      	bcc.n	8006ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e00f      	b.n	8006af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ad6:	4a0a      	ldr	r2, [pc, #40]	; (8006b00 <SysTick_Config+0x40>)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ade:	210f      	movs	r1, #15
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ae4:	f7ff ff8e 	bl	8006a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <SysTick_Config+0x40>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <SysTick_Config+0x40>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	e000e010 	.word	0xe000e010

08006b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff ff47 	bl	80069a0 <__NVIC_SetPriorityGrouping>
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	4603      	mov	r3, r0
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b2c:	f7ff ff5c 	bl	80069e8 <__NVIC_GetPriorityGrouping>
 8006b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	6978      	ldr	r0, [r7, #20]
 8006b38:	f7ff ff8e 	bl	8006a58 <NVIC_EncodePriority>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b42:	4611      	mov	r1, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff ff5d 	bl	8006a04 <__NVIC_SetPriority>
}
 8006b4a:	bf00      	nop
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff ffb0 	bl	8006ac0 <SysTick_Config>
 8006b60:	4603      	mov	r3, r0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e00e      	b.n	8006b9a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	795b      	ldrb	r3, [r3, #5]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d105      	bne.n	8006b92 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fd07 	bl	80065a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006bb6:	4b23      	ldr	r3, [pc, #140]	; (8006c44 <HAL_FLASH_Program+0xa0>)
 8006bb8:	7e1b      	ldrb	r3, [r3, #24]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_FLASH_Program+0x1e>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e03b      	b.n	8006c3a <HAL_FLASH_Program+0x96>
 8006bc2:	4b20      	ldr	r3, [pc, #128]	; (8006c44 <HAL_FLASH_Program+0xa0>)
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006bc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006bcc:	f000 f860 	bl	8006c90 <FLASH_WaitForLastOperation>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d12b      	bne.n	8006c32 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d105      	bne.n	8006bec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006be0:	783b      	ldrb	r3, [r7, #0]
 8006be2:	4619      	mov	r1, r3
 8006be4:	68b8      	ldr	r0, [r7, #8]
 8006be6:	f000 f90b 	bl	8006e00 <FLASH_Program_Byte>
 8006bea:	e016      	b.n	8006c1a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d105      	bne.n	8006bfe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006bf2:	883b      	ldrh	r3, [r7, #0]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	68b8      	ldr	r0, [r7, #8]
 8006bf8:	f000 f8de 	bl	8006db8 <FLASH_Program_HalfWord>
 8006bfc:	e00d      	b.n	8006c1a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d105      	bne.n	8006c10 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	4619      	mov	r1, r3
 8006c08:	68b8      	ldr	r0, [r7, #8]
 8006c0a:	f000 f8b3 	bl	8006d74 <FLASH_Program_Word>
 8006c0e:	e004      	b.n	8006c1a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c14:	68b8      	ldr	r0, [r7, #8]
 8006c16:	f000 f87b 	bl	8006d10 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c1e:	f000 f837 	bl	8006c90 <FLASH_WaitForLastOperation>
 8006c22:	4603      	mov	r3, r0
 8006c24:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006c26:	4b08      	ldr	r3, [pc, #32]	; (8006c48 <HAL_FLASH_Program+0xa4>)
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	4a07      	ldr	r2, [pc, #28]	; (8006c48 <HAL_FLASH_Program+0xa4>)
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006c32:	4b04      	ldr	r3, [pc, #16]	; (8006c44 <HAL_FLASH_Program+0xa0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000158 	.word	0x20000158
 8006c48:	40023c00 	.word	0x40023c00

08006c4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006c56:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <HAL_FLASH_Unlock+0x38>)
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	da0b      	bge.n	8006c76 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <HAL_FLASH_Unlock+0x38>)
 8006c60:	4a09      	ldr	r2, [pc, #36]	; (8006c88 <HAL_FLASH_Unlock+0x3c>)
 8006c62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006c64:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <HAL_FLASH_Unlock+0x38>)
 8006c66:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <HAL_FLASH_Unlock+0x40>)
 8006c68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <HAL_FLASH_Unlock+0x38>)
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da01      	bge.n	8006c76 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006c76:	79fb      	ldrb	r3, [r7, #7]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	40023c00 	.word	0x40023c00
 8006c88:	45670123 	.word	0x45670123
 8006c8c:	cdef89ab 	.word	0xcdef89ab

08006c90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006c9c:	4b1a      	ldr	r3, [pc, #104]	; (8006d08 <FLASH_WaitForLastOperation+0x78>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006ca2:	f7ff fe4d 	bl	8006940 <HAL_GetTick>
 8006ca6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006ca8:	e010      	b.n	8006ccc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb0:	d00c      	beq.n	8006ccc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d007      	beq.n	8006cc8 <FLASH_WaitForLastOperation+0x38>
 8006cb8:	f7ff fe42 	bl	8006940 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d201      	bcs.n	8006ccc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e019      	b.n	8006d00 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006ccc:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <FLASH_WaitForLastOperation+0x7c>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e8      	bne.n	8006caa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <FLASH_WaitForLastOperation+0x7c>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006ce4:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <FLASH_WaitForLastOperation+0x7c>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006cea:	4b08      	ldr	r3, [pc, #32]	; (8006d0c <FLASH_WaitForLastOperation+0x7c>)
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006cf6:	f000 f8a5 	bl	8006e44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
  
}  
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000158 	.word	0x20000158
 8006d0c:	40023c00 	.word	0x40023c00

08006d10 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006d1c:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <FLASH_Program_DoubleWord+0x60>)
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	4a13      	ldr	r2, [pc, #76]	; (8006d70 <FLASH_Program_DoubleWord+0x60>)
 8006d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006d28:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <FLASH_Program_DoubleWord+0x60>)
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	4a10      	ldr	r2, [pc, #64]	; (8006d70 <FLASH_Program_DoubleWord+0x60>)
 8006d2e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006d32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006d34:	4b0e      	ldr	r3, [pc, #56]	; (8006d70 <FLASH_Program_DoubleWord+0x60>)
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	4a0d      	ldr	r2, [pc, #52]	; (8006d70 <FLASH_Program_DoubleWord+0x60>)
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006d46:	f3bf 8f6f 	isb	sy
}
 8006d4a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	000a      	movs	r2, r1
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	68f9      	ldr	r1, [r7, #12]
 8006d5e:	3104      	adds	r1, #4
 8006d60:	4613      	mov	r3, r2
 8006d62:	600b      	str	r3, [r1, #0]
}
 8006d64:	bf00      	nop
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	40023c00 	.word	0x40023c00

08006d74 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <FLASH_Program_Word+0x40>)
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	4a0c      	ldr	r2, [pc, #48]	; (8006db4 <FLASH_Program_Word+0x40>)
 8006d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006d8a:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <FLASH_Program_Word+0x40>)
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <FLASH_Program_Word+0x40>)
 8006d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006d96:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <FLASH_Program_Word+0x40>)
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	4a06      	ldr	r2, [pc, #24]	; (8006db4 <FLASH_Program_Word+0x40>)
 8006d9c:	f043 0301 	orr.w	r3, r3, #1
 8006da0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	601a      	str	r2, [r3, #0]
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40023c00 	.word	0x40023c00

08006db8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006dc4:	4b0d      	ldr	r3, [pc, #52]	; (8006dfc <FLASH_Program_HalfWord+0x44>)
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	4a0c      	ldr	r2, [pc, #48]	; (8006dfc <FLASH_Program_HalfWord+0x44>)
 8006dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <FLASH_Program_HalfWord+0x44>)
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <FLASH_Program_HalfWord+0x44>)
 8006dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006ddc:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <FLASH_Program_HalfWord+0x44>)
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	4a06      	ldr	r2, [pc, #24]	; (8006dfc <FLASH_Program_HalfWord+0x44>)
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	887a      	ldrh	r2, [r7, #2]
 8006dec:	801a      	strh	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40023c00 	.word	0x40023c00

08006e00 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006e0c:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <FLASH_Program_Byte+0x40>)
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	4a0b      	ldr	r2, [pc, #44]	; (8006e40 <FLASH_Program_Byte+0x40>)
 8006e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006e18:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <FLASH_Program_Byte+0x40>)
 8006e1a:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <FLASH_Program_Byte+0x40>)
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <FLASH_Program_Byte+0x40>)
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	4a06      	ldr	r2, [pc, #24]	; (8006e40 <FLASH_Program_Byte+0x40>)
 8006e26:	f043 0301 	orr.w	r3, r3, #1
 8006e2a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	701a      	strb	r2, [r3, #0]
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40023c00 	.word	0x40023c00

08006e44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006e48:	4b2f      	ldr	r3, [pc, #188]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006e54:	4b2d      	ldr	r3, [pc, #180]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	f043 0310 	orr.w	r3, r3, #16
 8006e5c:	4a2b      	ldr	r2, [pc, #172]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006e5e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006e60:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006e62:	2210      	movs	r2, #16
 8006e64:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006e66:	4b28      	ldr	r3, [pc, #160]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006e72:	4b26      	ldr	r3, [pc, #152]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f043 0308 	orr.w	r3, r3, #8
 8006e7a:	4a24      	ldr	r2, [pc, #144]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006e7c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006e7e:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006e80:	2220      	movs	r2, #32
 8006e82:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006e84:	4b20      	ldr	r3, [pc, #128]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006e90:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f043 0304 	orr.w	r3, r3, #4
 8006e98:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006e9a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006e9c:	4b1a      	ldr	r3, [pc, #104]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006e9e:	2240      	movs	r2, #64	; 0x40
 8006ea0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006ea2:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d008      	beq.n	8006ec0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006eae:	4b17      	ldr	r3, [pc, #92]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f043 0302 	orr.w	r3, r3, #2
 8006eb6:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006eb8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006ebc:	2280      	movs	r2, #128	; 0x80
 8006ebe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006ec0:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d009      	beq.n	8006ee0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	4a0d      	ldr	r2, [pc, #52]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006ed6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ede:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006ee0:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006eec:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	f043 0320 	orr.w	r3, r3, #32
 8006ef4:	4a05      	ldr	r2, [pc, #20]	; (8006f0c <FLASH_SetErrorCode+0xc8>)
 8006ef6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006ef8:	4b03      	ldr	r3, [pc, #12]	; (8006f08 <FLASH_SetErrorCode+0xc4>)
 8006efa:	2202      	movs	r2, #2
 8006efc:	60da      	str	r2, [r3, #12]
  }
}
 8006efe:	bf00      	nop
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	40023c00 	.word	0x40023c00
 8006f0c:	20000158 	.word	0x20000158

08006f10 <LL_GPIO_SetPinMode>:
{
 8006f10:	b480      	push	{r7}
 8006f12:	b089      	sub	sp, #36	; 0x24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	fa93 f3a3 	rbit	r3, r3
 8006f2a:	613b      	str	r3, [r7, #16]
  return result;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	fab3 f383 	clz	r3, r3
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	2103      	movs	r1, #3
 8006f38:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	401a      	ands	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	fa93 f3a3 	rbit	r3, r3
 8006f4a:	61bb      	str	r3, [r7, #24]
  return result;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	fab3 f383 	clz	r3, r3
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	601a      	str	r2, [r3, #0]
}
 8006f62:	bf00      	nop
 8006f64:	3724      	adds	r7, #36	; 0x24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <LL_GPIO_SetPinOutputType>:
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	43db      	mvns	r3, r3
 8006f82:	401a      	ands	r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	fb01 f303 	mul.w	r3, r1, r3
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	605a      	str	r2, [r3, #4]
}
 8006f92:	bf00      	nop
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <LL_GPIO_SetPinSpeed>:
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b089      	sub	sp, #36	; 0x24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	fa93 f3a3 	rbit	r3, r3
 8006fb8:	613b      	str	r3, [r7, #16]
  return result;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	fab3 f383 	clz	r3, r3
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	2103      	movs	r1, #3
 8006fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	401a      	ands	r2, r3
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	fa93 f3a3 	rbit	r3, r3
 8006fd8:	61bb      	str	r3, [r7, #24]
  return result;
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	fab3 f383 	clz	r3, r3
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fea:	431a      	orrs	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	609a      	str	r2, [r3, #8]
}
 8006ff0:	bf00      	nop
 8006ff2:	3724      	adds	r7, #36	; 0x24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <LL_GPIO_SetPinPull>:
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b089      	sub	sp, #36	; 0x24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	fa93 f3a3 	rbit	r3, r3
 8007016:	613b      	str	r3, [r7, #16]
  return result;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	fab3 f383 	clz	r3, r3
 800701e:	b2db      	uxtb	r3, r3
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	2103      	movs	r1, #3
 8007024:	fa01 f303 	lsl.w	r3, r1, r3
 8007028:	43db      	mvns	r3, r3
 800702a:	401a      	ands	r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	fa93 f3a3 	rbit	r3, r3
 8007036:	61bb      	str	r3, [r7, #24]
  return result;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	fab3 f383 	clz	r3, r3
 800703e:	b2db      	uxtb	r3, r3
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	fa01 f303 	lsl.w	r3, r1, r3
 8007048:	431a      	orrs	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	60da      	str	r2, [r3, #12]
}
 800704e:	bf00      	nop
 8007050:	3724      	adds	r7, #36	; 0x24
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <LL_GPIO_SetAFPin_0_7>:
{
 800705a:	b480      	push	{r7}
 800705c:	b089      	sub	sp, #36	; 0x24
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a1a      	ldr	r2, [r3, #32]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	fa93 f3a3 	rbit	r3, r3
 8007074:	613b      	str	r3, [r7, #16]
  return result;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	fab3 f383 	clz	r3, r3
 800707c:	b2db      	uxtb	r3, r3
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	210f      	movs	r1, #15
 8007082:	fa01 f303 	lsl.w	r3, r1, r3
 8007086:	43db      	mvns	r3, r3
 8007088:	401a      	ands	r2, r3
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	fa93 f3a3 	rbit	r3, r3
 8007094:	61bb      	str	r3, [r7, #24]
  return result;
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	fab3 f383 	clz	r3, r3
 800709c:	b2db      	uxtb	r3, r3
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	fa01 f303 	lsl.w	r3, r1, r3
 80070a6:	431a      	orrs	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	621a      	str	r2, [r3, #32]
}
 80070ac:	bf00      	nop
 80070ae:	3724      	adds	r7, #36	; 0x24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <LL_GPIO_SetAFPin_8_15>:
{
 80070b8:	b480      	push	{r7}
 80070ba:	b089      	sub	sp, #36	; 0x24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	fa93 f3a3 	rbit	r3, r3
 80070d4:	613b      	str	r3, [r7, #16]
  return result;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	fab3 f383 	clz	r3, r3
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	210f      	movs	r1, #15
 80070e2:	fa01 f303 	lsl.w	r3, r1, r3
 80070e6:	43db      	mvns	r3, r3
 80070e8:	401a      	ands	r2, r3
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	fa93 f3a3 	rbit	r3, r3
 80070f6:	61bb      	str	r3, [r7, #24]
  return result;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	fab3 f383 	clz	r3, r3
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	fa01 f303 	lsl.w	r3, r1, r3
 8007108:	431a      	orrs	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800710e:	bf00      	nop
 8007110:	3724      	adds	r7, #36	; 0x24
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b088      	sub	sp, #32
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8007128:	2300      	movs	r3, #0
 800712a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	fa93 f3a3 	rbit	r3, r3
 8007138:	613b      	str	r3, [r7, #16]
  return result;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	fab3 f383 	clz	r3, r3
 8007140:	b2db      	uxtb	r3, r3
 8007142:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007144:	e050      	b.n	80071e8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	2101      	movs	r1, #1
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	fa01 f303 	lsl.w	r3, r1, r3
 8007152:	4013      	ands	r3, r2
 8007154:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d042      	beq.n	80071e2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d003      	beq.n	800716c <LL_GPIO_Init+0x52>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d10d      	bne.n	8007188 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	461a      	mov	r2, r3
 8007172:	69b9      	ldr	r1, [r7, #24]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff ff12 	bl	8006f9e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	461a      	mov	r2, r3
 8007180:	69b9      	ldr	r1, [r7, #24]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff fef3 	bl	8006f6e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	461a      	mov	r2, r3
 800718e:	69b9      	ldr	r1, [r7, #24]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff ff33 	bl	8006ffc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d11a      	bne.n	80071d4 <LL_GPIO_Init+0xba>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	fa93 f3a3 	rbit	r3, r3
 80071a8:	60bb      	str	r3, [r7, #8]
  return result;
 80071aa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80071ac:	fab3 f383 	clz	r3, r3
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b07      	cmp	r3, #7
 80071b4:	d807      	bhi.n	80071c6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	461a      	mov	r2, r3
 80071bc:	69b9      	ldr	r1, [r7, #24]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7ff ff4b 	bl	800705a <LL_GPIO_SetAFPin_0_7>
 80071c4:	e006      	b.n	80071d4 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	461a      	mov	r2, r3
 80071cc:	69b9      	ldr	r1, [r7, #24]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff ff72 	bl	80070b8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	461a      	mov	r2, r3
 80071da:	69b9      	ldr	r1, [r7, #24]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff fe97 	bl	8006f10 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	3301      	adds	r3, #1
 80071e6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	fa22 f303 	lsr.w	r3, r2, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1a7      	bne.n	8007146 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <LL_RCC_GetSysClkSource>:
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007204:	4b04      	ldr	r3, [pc, #16]	; (8007218 <LL_RCC_GetSysClkSource+0x18>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 030c 	and.w	r3, r3, #12
}
 800720c:	4618      	mov	r0, r3
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40023800 	.word	0x40023800

0800721c <LL_RCC_GetAHBPrescaler>:
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007220:	4b04      	ldr	r3, [pc, #16]	; (8007234 <LL_RCC_GetAHBPrescaler+0x18>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007228:	4618      	mov	r0, r3
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40023800 	.word	0x40023800

08007238 <LL_RCC_GetAPB1Prescaler>:
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <LL_RCC_GetAPB1Prescaler+0x18>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8007244:	4618      	mov	r0, r3
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40023800 	.word	0x40023800

08007254 <LL_RCC_GetAPB2Prescaler>:
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007258:	4b04      	ldr	r3, [pc, #16]	; (800726c <LL_RCC_GetAPB2Prescaler+0x18>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8007260:	4618      	mov	r0, r3
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800

08007270 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007274:	4b04      	ldr	r3, [pc, #16]	; (8007288 <LL_RCC_PLL_GetMainSource+0x18>)
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800727c:	4618      	mov	r0, r3
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	40023800 	.word	0x40023800

0800728c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007290:	4b04      	ldr	r3, [pc, #16]	; (80072a4 <LL_RCC_PLL_GetN+0x18>)
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	099b      	lsrs	r3, r3, #6
 8007296:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800729a:	4618      	mov	r0, r3
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	40023800 	.word	0x40023800

080072a8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80072ac:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <LL_RCC_PLL_GetP+0x18>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40023800 	.word	0x40023800

080072c4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80072c8:	4b04      	ldr	r3, [pc, #16]	; (80072dc <LL_RCC_PLL_GetDivider+0x18>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40023800 	.word	0x40023800

080072e0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80072e8:	f000 f820 	bl	800732c <RCC_GetSystemClockFreq>
 80072ec:	4602      	mov	r2, r0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 f840 	bl	800737c <RCC_GetHCLKClockFreq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4618      	mov	r0, r3
 8007308:	f000 f84e 	bl	80073a8 <RCC_GetPCLK1ClockFreq>
 800730c:	4602      	mov	r2, r0
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 f85a 	bl	80073d0 <RCC_GetPCLK2ClockFreq>
 800731c:	4602      	mov	r2, r0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60da      	str	r2, [r3, #12]
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007336:	f7ff ff63 	bl	8007200 <LL_RCC_GetSysClkSource>
 800733a:	4603      	mov	r3, r0
 800733c:	2b08      	cmp	r3, #8
 800733e:	d00c      	beq.n	800735a <RCC_GetSystemClockFreq+0x2e>
 8007340:	2b08      	cmp	r3, #8
 8007342:	d80f      	bhi.n	8007364 <RCC_GetSystemClockFreq+0x38>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <RCC_GetSystemClockFreq+0x22>
 8007348:	2b04      	cmp	r3, #4
 800734a:	d003      	beq.n	8007354 <RCC_GetSystemClockFreq+0x28>
 800734c:	e00a      	b.n	8007364 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800734e:	4b09      	ldr	r3, [pc, #36]	; (8007374 <RCC_GetSystemClockFreq+0x48>)
 8007350:	607b      	str	r3, [r7, #4]
      break;
 8007352:	e00a      	b.n	800736a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007354:	4b08      	ldr	r3, [pc, #32]	; (8007378 <RCC_GetSystemClockFreq+0x4c>)
 8007356:	607b      	str	r3, [r7, #4]
      break;
 8007358:	e007      	b.n	800736a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800735a:	2008      	movs	r0, #8
 800735c:	f000 f84c 	bl	80073f8 <RCC_PLL_GetFreqDomain_SYS>
 8007360:	6078      	str	r0, [r7, #4]
      break;
 8007362:	e002      	b.n	800736a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007364:	4b03      	ldr	r3, [pc, #12]	; (8007374 <RCC_GetSystemClockFreq+0x48>)
 8007366:	607b      	str	r3, [r7, #4]
      break;
 8007368:	bf00      	nop
  }

  return frequency;
 800736a:	687b      	ldr	r3, [r7, #4]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	00f42400 	.word	0x00f42400
 8007378:	017d7840 	.word	0x017d7840

0800737c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007384:	f7ff ff4a 	bl	800721c <LL_RCC_GetAHBPrescaler>
 8007388:	4603      	mov	r3, r0
 800738a:	091b      	lsrs	r3, r3, #4
 800738c:	f003 030f 	and.w	r3, r3, #15
 8007390:	4a04      	ldr	r2, [pc, #16]	; (80073a4 <RCC_GetHCLKClockFreq+0x28>)
 8007392:	5cd3      	ldrb	r3, [r2, r3]
 8007394:	461a      	mov	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	40d3      	lsrs	r3, r2
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	08007f7c 	.word	0x08007f7c

080073a8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80073b0:	f7ff ff42 	bl	8007238 <LL_RCC_GetAPB1Prescaler>
 80073b4:	4603      	mov	r3, r0
 80073b6:	0a9b      	lsrs	r3, r3, #10
 80073b8:	4a04      	ldr	r2, [pc, #16]	; (80073cc <RCC_GetPCLK1ClockFreq+0x24>)
 80073ba:	5cd3      	ldrb	r3, [r2, r3]
 80073bc:	461a      	mov	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	40d3      	lsrs	r3, r2
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	08007f8c 	.word	0x08007f8c

080073d0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80073d8:	f7ff ff3c 	bl	8007254 <LL_RCC_GetAPB2Prescaler>
 80073dc:	4603      	mov	r3, r0
 80073de:	0b5b      	lsrs	r3, r3, #13
 80073e0:	4a04      	ldr	r2, [pc, #16]	; (80073f4 <RCC_GetPCLK2ClockFreq+0x24>)
 80073e2:	5cd3      	ldrb	r3, [r2, r3]
 80073e4:	461a      	mov	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	40d3      	lsrs	r3, r2
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	08007f8c 	.word	0x08007f8c

080073f8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80073f8:	b590      	push	{r4, r7, lr}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	2300      	movs	r3, #0
 800740a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800740c:	f7ff ff30 	bl	8007270 <LL_RCC_PLL_GetMainSource>
 8007410:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d004      	beq.n	8007422 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800741e:	d003      	beq.n	8007428 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007420:	e005      	b.n	800742e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007422:	4b12      	ldr	r3, [pc, #72]	; (800746c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007424:	617b      	str	r3, [r7, #20]
      break;
 8007426:	e005      	b.n	8007434 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007428:	4b11      	ldr	r3, [pc, #68]	; (8007470 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800742a:	617b      	str	r3, [r7, #20]
      break;
 800742c:	e002      	b.n	8007434 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800742e:	4b0f      	ldr	r3, [pc, #60]	; (800746c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007430:	617b      	str	r3, [r7, #20]
      break;
 8007432:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b08      	cmp	r3, #8
 8007438:	d113      	bne.n	8007462 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800743a:	f7ff ff43 	bl	80072c4 <LL_RCC_PLL_GetDivider>
 800743e:	4602      	mov	r2, r0
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	fbb3 f4f2 	udiv	r4, r3, r2
 8007446:	f7ff ff21 	bl	800728c <LL_RCC_PLL_GetN>
 800744a:	4603      	mov	r3, r0
 800744c:	fb03 f404 	mul.w	r4, r3, r4
 8007450:	f7ff ff2a 	bl	80072a8 <LL_RCC_PLL_GetP>
 8007454:	4603      	mov	r3, r0
 8007456:	0c1b      	lsrs	r3, r3, #16
 8007458:	3301      	adds	r3, #1
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	fbb4 f3f3 	udiv	r3, r4, r3
 8007460:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007462:	693b      	ldr	r3, [r7, #16]
}
 8007464:	4618      	mov	r0, r3
 8007466:	371c      	adds	r7, #28
 8007468:	46bd      	mov	sp, r7
 800746a:	bd90      	pop	{r4, r7, pc}
 800746c:	00f42400 	.word	0x00f42400
 8007470:	017d7840 	.word	0x017d7840

08007474 <LL_TIM_SetPrescaler>:
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <LL_TIM_SetAutoReload>:
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <LL_TIM_SetRepetitionCounter>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <LL_TIM_OC_SetCompareCH1>:
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <LL_TIM_OC_SetCompareCH2>:
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <LL_TIM_OC_SetCompareCH3>:
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <LL_TIM_OC_SetCompareCH4>:
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	f043 0201 	orr.w	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	615a      	str	r2, [r3, #20]
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a31      	ldr	r2, [pc, #196]	; (8007630 <LL_TIM_Init+0xd8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00f      	beq.n	8007590 <LL_TIM_Init+0x38>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007576:	d00b      	beq.n	8007590 <LL_TIM_Init+0x38>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a2e      	ldr	r2, [pc, #184]	; (8007634 <LL_TIM_Init+0xdc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d007      	beq.n	8007590 <LL_TIM_Init+0x38>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a2d      	ldr	r2, [pc, #180]	; (8007638 <LL_TIM_Init+0xe0>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <LL_TIM_Init+0x38>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a2c      	ldr	r2, [pc, #176]	; (800763c <LL_TIM_Init+0xe4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d106      	bne.n	800759e <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a23      	ldr	r2, [pc, #140]	; (8007630 <LL_TIM_Init+0xd8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d01b      	beq.n	80075de <LL_TIM_Init+0x86>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ac:	d017      	beq.n	80075de <LL_TIM_Init+0x86>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a20      	ldr	r2, [pc, #128]	; (8007634 <LL_TIM_Init+0xdc>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <LL_TIM_Init+0x86>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <LL_TIM_Init+0xe0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00f      	beq.n	80075de <LL_TIM_Init+0x86>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a1e      	ldr	r2, [pc, #120]	; (800763c <LL_TIM_Init+0xe4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00b      	beq.n	80075de <LL_TIM_Init+0x86>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <LL_TIM_Init+0xe8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d007      	beq.n	80075de <LL_TIM_Init+0x86>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <LL_TIM_Init+0xec>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d003      	beq.n	80075de <LL_TIM_Init+0x86>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1b      	ldr	r2, [pc, #108]	; (8007648 <LL_TIM_Init+0xf0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d106      	bne.n	80075ec <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff ff49 	bl	8007490 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff ff35 	bl	8007474 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a08      	ldr	r2, [pc, #32]	; (8007630 <LL_TIM_Init+0xd8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d105      	bne.n	800761e <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff ff47 	bl	80074ac <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff ff8a 	bl	8007538 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40010000 	.word	0x40010000
 8007634:	40000400 	.word	0x40000400
 8007638:	40000800 	.word	0x40000800
 800763c:	40000c00 	.word	0x40000c00
 8007640:	40014000 	.word	0x40014000
 8007644:	40014400 	.word	0x40014400
 8007648:	40014800 	.word	0x40014800

0800764c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007662:	d027      	beq.n	80076b4 <LL_TIM_OC_Init+0x68>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766a:	d82a      	bhi.n	80076c2 <LL_TIM_OC_Init+0x76>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007672:	d018      	beq.n	80076a6 <LL_TIM_OC_Init+0x5a>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800767a:	d822      	bhi.n	80076c2 <LL_TIM_OC_Init+0x76>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d003      	beq.n	800768a <LL_TIM_OC_Init+0x3e>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b10      	cmp	r3, #16
 8007686:	d007      	beq.n	8007698 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007688:	e01b      	b.n	80076c2 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f867 	bl	8007760 <OC1Config>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]
      break;
 8007696:	e015      	b.n	80076c4 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 f8c6 	bl	800782c <OC2Config>
 80076a0:	4603      	mov	r3, r0
 80076a2:	75fb      	strb	r3, [r7, #23]
      break;
 80076a4:	e00e      	b.n	80076c4 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f929 	bl	8007900 <OC3Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]
      break;
 80076b2:	e007      	b.n	80076c4 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f98c 	bl	80079d4 <OC4Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	75fb      	strb	r3, [r7, #23]
      break;
 80076c0:	e000      	b.n	80076c4 <LL_TIM_OC_Init+0x78>
      break;
 80076c2:	bf00      	nop
  }

  return result;
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b085      	sub	sp, #20
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	7b12      	ldrb	r2, [r2, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	89d2      	ldrh	r2, [r2, #14]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f023 0201 	bic.w	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f023 0202 	bic.w	r2, r3, #2
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f023 0201 	bic.w	r2, r3, #1
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a1a      	ldr	r2, [pc, #104]	; (8007828 <OC1Config+0xc8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d11e      	bne.n	8007800 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f023 0208 	bic.w	r2, r3, #8
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4313      	orrs	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f023 0204 	bic.w	r2, r3, #4
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff fe58 	bl	80074c8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40010000 	.word	0x40010000

0800782c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f023 0210 	bic.w	r2, r3, #16
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	021b      	lsls	r3, r3, #8
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f023 0220 	bic.w	r2, r3, #32
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	4313      	orrs	r3, r2
 800787a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f023 0210 	bic.w	r2, r3, #16
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	4313      	orrs	r3, r2
 800788a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a1b      	ldr	r2, [pc, #108]	; (80078fc <OC2Config+0xd0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d11f      	bne.n	80078d4 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	019b      	lsls	r3, r3, #6
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	019b      	lsls	r3, r3, #6
 80078b0:	4313      	orrs	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff fdfc 	bl	80074e4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40010000 	.word	0x40010000

08007900 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0303 	bic.w	r3, r3, #3
 800792e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1b      	ldr	r2, [pc, #108]	; (80079d0 <OC3Config+0xd0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d11f      	bne.n	80079a6 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	029b      	lsls	r3, r3, #10
 8007972:	4313      	orrs	r3, r2
 8007974:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	029b      	lsls	r3, r3, #10
 8007982:	4313      	orrs	r3, r2
 8007984:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	015b      	lsls	r3, r3, #5
 80079a2:	4313      	orrs	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff fda1 	bl	8007500 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	40010000 	.word	0x40010000

080079d4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	031b      	lsls	r3, r3, #12
 8007a20:	4313      	orrs	r3, r2
 8007a22:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	031b      	lsls	r3, r3, #12
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a0f      	ldr	r2, [pc, #60]	; (8007a74 <OC4Config+0xa0>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d107      	bne.n	8007a4c <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	019b      	lsls	r3, r3, #6
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fd5c 	bl	800751c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	40010000 	.word	0x40010000

08007a78 <LL_USART_IsEnabled>:
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8c:	bf0c      	ite	eq
 8007a8e:	2301      	moveq	r3, #1
 8007a90:	2300      	movne	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <LL_USART_SetStopBitsLength>:
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	611a      	str	r2, [r3, #16]
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <LL_USART_SetHWFlowCtrl>:
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	615a      	str	r2, [r3, #20]
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <LL_USART_SetBaudRate>:
{
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	b09f      	sub	sp, #124	; 0x7c
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6778      	str	r0, [r7, #116]	; 0x74
 8007af6:	6739      	str	r1, [r7, #112]	; 0x70
 8007af8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007afa:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b02:	f040 80bc 	bne.w	8007c7e <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b08:	461c      	mov	r4, r3
 8007b0a:	f04f 0500 	mov.w	r5, #0
 8007b0e:	4622      	mov	r2, r4
 8007b10:	462b      	mov	r3, r5
 8007b12:	eb12 0a02 	adds.w	sl, r2, r2
 8007b16:	eb43 0b03 	adc.w	fp, r3, r3
 8007b1a:	4652      	mov	r2, sl
 8007b1c:	465b      	mov	r3, fp
 8007b1e:	1912      	adds	r2, r2, r4
 8007b20:	eb45 0303 	adc.w	r3, r5, r3
 8007b24:	f04f 0000 	mov.w	r0, #0
 8007b28:	f04f 0100 	mov.w	r1, #0
 8007b2c:	00d9      	lsls	r1, r3, #3
 8007b2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b32:	00d0      	lsls	r0, r2, #3
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	1911      	adds	r1, r2, r4
 8007b3a:	6639      	str	r1, [r7, #96]	; 0x60
 8007b3c:	416b      	adcs	r3, r5
 8007b3e:	667b      	str	r3, [r7, #100]	; 0x64
 8007b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b42:	461a      	mov	r2, r3
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	1891      	adds	r1, r2, r2
 8007b4a:	6339      	str	r1, [r7, #48]	; 0x30
 8007b4c:	415b      	adcs	r3, r3
 8007b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b54:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007b58:	f7fc fb3c 	bl	80041d4 <__aeabi_uldivmod>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4ba9      	ldr	r3, [pc, #676]	; (8007e08 <LL_USART_SetBaudRate+0x31c>)
 8007b62:	fba3 2302 	umull	r2, r3, r3, r2
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	b29e      	uxth	r6, r3
 8007b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b70:	461c      	mov	r4, r3
 8007b72:	f04f 0500 	mov.w	r5, #0
 8007b76:	4622      	mov	r2, r4
 8007b78:	462b      	mov	r3, r5
 8007b7a:	1891      	adds	r1, r2, r2
 8007b7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b7e:	415b      	adcs	r3, r3
 8007b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b86:	1912      	adds	r2, r2, r4
 8007b88:	eb45 0303 	adc.w	r3, r5, r3
 8007b8c:	f04f 0000 	mov.w	r0, #0
 8007b90:	f04f 0100 	mov.w	r1, #0
 8007b94:	00d9      	lsls	r1, r3, #3
 8007b96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b9a:	00d0      	lsls	r0, r2, #3
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	1911      	adds	r1, r2, r4
 8007ba2:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ba4:	416b      	adcs	r3, r5
 8007ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007baa:	461a      	mov	r2, r3
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	1891      	adds	r1, r2, r2
 8007bb2:	6239      	str	r1, [r7, #32]
 8007bb4:	415b      	adcs	r3, r3
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bbc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007bc0:	f7fc fb08 	bl	80041d4 <__aeabi_uldivmod>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4b8f      	ldr	r3, [pc, #572]	; (8007e08 <LL_USART_SetBaudRate+0x31c>)
 8007bca:	fba3 1302 	umull	r1, r3, r3, r2
 8007bce:	095b      	lsrs	r3, r3, #5
 8007bd0:	2164      	movs	r1, #100	; 0x64
 8007bd2:	fb01 f303 	mul.w	r3, r1, r3
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	00db      	lsls	r3, r3, #3
 8007bda:	3332      	adds	r3, #50	; 0x32
 8007bdc:	4a8a      	ldr	r2, [pc, #552]	; (8007e08 <LL_USART_SetBaudRate+0x31c>)
 8007bde:	fba2 2303 	umull	r2, r3, r2, r3
 8007be2:	095b      	lsrs	r3, r3, #5
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	4433      	add	r3, r6
 8007bf2:	b29e      	uxth	r6, r3
 8007bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f04f 0100 	mov.w	r1, #0
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	1894      	adds	r4, r2, r2
 8007c02:	61bc      	str	r4, [r7, #24]
 8007c04:	415b      	adcs	r3, r3
 8007c06:	61fb      	str	r3, [r7, #28]
 8007c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c0c:	1812      	adds	r2, r2, r0
 8007c0e:	eb41 0303 	adc.w	r3, r1, r3
 8007c12:	f04f 0400 	mov.w	r4, #0
 8007c16:	f04f 0500 	mov.w	r5, #0
 8007c1a:	00dd      	lsls	r5, r3, #3
 8007c1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c20:	00d4      	lsls	r4, r2, #3
 8007c22:	4622      	mov	r2, r4
 8007c24:	462b      	mov	r3, r5
 8007c26:	1814      	adds	r4, r2, r0
 8007c28:	653c      	str	r4, [r7, #80]	; 0x50
 8007c2a:	414b      	adcs	r3, r1
 8007c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8007c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c30:	461a      	mov	r2, r3
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	1891      	adds	r1, r2, r2
 8007c38:	6139      	str	r1, [r7, #16]
 8007c3a:	415b      	adcs	r3, r3
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c46:	f7fc fac5 	bl	80041d4 <__aeabi_uldivmod>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4b6e      	ldr	r3, [pc, #440]	; (8007e08 <LL_USART_SetBaudRate+0x31c>)
 8007c50:	fba3 1302 	umull	r1, r3, r3, r2
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	2164      	movs	r1, #100	; 0x64
 8007c58:	fb01 f303 	mul.w	r3, r1, r3
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	3332      	adds	r3, #50	; 0x32
 8007c62:	4a69      	ldr	r2, [pc, #420]	; (8007e08 <LL_USART_SetBaudRate+0x31c>)
 8007c64:	fba2 2303 	umull	r2, r3, r2, r3
 8007c68:	095b      	lsrs	r3, r3, #5
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	4433      	add	r3, r6
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	461a      	mov	r2, r3
 8007c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c7a:	609a      	str	r2, [r3, #8]
}
 8007c7c:	e0be      	b.n	8007dfc <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c80:	461c      	mov	r4, r3
 8007c82:	f04f 0500 	mov.w	r5, #0
 8007c86:	4622      	mov	r2, r4
 8007c88:	462b      	mov	r3, r5
 8007c8a:	eb12 0802 	adds.w	r8, r2, r2
 8007c8e:	eb43 0903 	adc.w	r9, r3, r3
 8007c92:	4642      	mov	r2, r8
 8007c94:	464b      	mov	r3, r9
 8007c96:	1912      	adds	r2, r2, r4
 8007c98:	eb45 0303 	adc.w	r3, r5, r3
 8007c9c:	f04f 0000 	mov.w	r0, #0
 8007ca0:	f04f 0100 	mov.w	r1, #0
 8007ca4:	00d9      	lsls	r1, r3, #3
 8007ca6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007caa:	00d0      	lsls	r0, r2, #3
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	1911      	adds	r1, r2, r4
 8007cb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cb4:	416b      	adcs	r3, r5
 8007cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f04f 0100 	mov.w	r1, #0
 8007cc0:	f04f 0200 	mov.w	r2, #0
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	008b      	lsls	r3, r1, #2
 8007cca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cce:	0082      	lsls	r2, r0, #2
 8007cd0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007cd4:	f7fc fa7e 	bl	80041d4 <__aeabi_uldivmod>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4b4a      	ldr	r3, [pc, #296]	; (8007e08 <LL_USART_SetBaudRate+0x31c>)
 8007cde:	fba3 2302 	umull	r2, r3, r3, r2
 8007ce2:	095b      	lsrs	r3, r3, #5
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	b29e      	uxth	r6, r3
 8007cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cec:	4618      	mov	r0, r3
 8007cee:	f04f 0100 	mov.w	r1, #0
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	1894      	adds	r4, r2, r2
 8007cf8:	60bc      	str	r4, [r7, #8]
 8007cfa:	415b      	adcs	r3, r3
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d02:	1812      	adds	r2, r2, r0
 8007d04:	eb41 0303 	adc.w	r3, r1, r3
 8007d08:	f04f 0400 	mov.w	r4, #0
 8007d0c:	f04f 0500 	mov.w	r5, #0
 8007d10:	00dd      	lsls	r5, r3, #3
 8007d12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d16:	00d4      	lsls	r4, r2, #3
 8007d18:	4622      	mov	r2, r4
 8007d1a:	462b      	mov	r3, r5
 8007d1c:	1814      	adds	r4, r2, r0
 8007d1e:	643c      	str	r4, [r7, #64]	; 0x40
 8007d20:	414b      	adcs	r3, r1
 8007d22:	647b      	str	r3, [r7, #68]	; 0x44
 8007d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d26:	4618      	mov	r0, r3
 8007d28:	f04f 0100 	mov.w	r1, #0
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	008b      	lsls	r3, r1, #2
 8007d36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d3a:	0082      	lsls	r2, r0, #2
 8007d3c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007d40:	f7fc fa48 	bl	80041d4 <__aeabi_uldivmod>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4b2f      	ldr	r3, [pc, #188]	; (8007e08 <LL_USART_SetBaudRate+0x31c>)
 8007d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8007d4e:	095b      	lsrs	r3, r3, #5
 8007d50:	2164      	movs	r1, #100	; 0x64
 8007d52:	fb01 f303 	mul.w	r3, r1, r3
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	3332      	adds	r3, #50	; 0x32
 8007d5c:	4a2a      	ldr	r2, [pc, #168]	; (8007e08 <LL_USART_SetBaudRate+0x31c>)
 8007d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	4433      	add	r3, r6
 8007d6e:	b29e      	uxth	r6, r3
 8007d70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d72:	4618      	mov	r0, r3
 8007d74:	f04f 0100 	mov.w	r1, #0
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	1894      	adds	r4, r2, r2
 8007d7e:	603c      	str	r4, [r7, #0]
 8007d80:	415b      	adcs	r3, r3
 8007d82:	607b      	str	r3, [r7, #4]
 8007d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d88:	1812      	adds	r2, r2, r0
 8007d8a:	eb41 0303 	adc.w	r3, r1, r3
 8007d8e:	f04f 0400 	mov.w	r4, #0
 8007d92:	f04f 0500 	mov.w	r5, #0
 8007d96:	00dd      	lsls	r5, r3, #3
 8007d98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d9c:	00d4      	lsls	r4, r2, #3
 8007d9e:	4622      	mov	r2, r4
 8007da0:	462b      	mov	r3, r5
 8007da2:	1814      	adds	r4, r2, r0
 8007da4:	63bc      	str	r4, [r7, #56]	; 0x38
 8007da6:	414b      	adcs	r3, r1
 8007da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dac:	4618      	mov	r0, r3
 8007dae:	f04f 0100 	mov.w	r1, #0
 8007db2:	f04f 0200 	mov.w	r2, #0
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	008b      	lsls	r3, r1, #2
 8007dbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dc0:	0082      	lsls	r2, r0, #2
 8007dc2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007dc6:	f7fc fa05 	bl	80041d4 <__aeabi_uldivmod>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4b0e      	ldr	r3, [pc, #56]	; (8007e08 <LL_USART_SetBaudRate+0x31c>)
 8007dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	2164      	movs	r1, #100	; 0x64
 8007dd8:	fb01 f303 	mul.w	r3, r1, r3
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	3332      	adds	r3, #50	; 0x32
 8007de2:	4a09      	ldr	r2, [pc, #36]	; (8007e08 <LL_USART_SetBaudRate+0x31c>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	f003 030f 	and.w	r3, r3, #15
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4433      	add	r3, r6
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	461a      	mov	r2, r3
 8007df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dfa:	609a      	str	r2, [r3, #8]
}
 8007dfc:	bf00      	nop
 8007dfe:	377c      	adds	r7, #124	; 0x7c
 8007e00:	46bd      	mov	sp, r7
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	bf00      	nop
 8007e08:	51eb851f 	.word	0x51eb851f

08007e0c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff fe2a 	bl	8007a78 <LL_USART_IsEnabled>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d149      	bne.n	8007ebe <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007e32:	f023 030c 	bic.w	r3, r3, #12
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	6851      	ldr	r1, [r2, #4]
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	68d2      	ldr	r2, [r2, #12]
 8007e3e:	4311      	orrs	r1, r2
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	6912      	ldr	r2, [r2, #16]
 8007e44:	4311      	orrs	r1, r2
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	6992      	ldr	r2, [r2, #24]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff fe21 	bl	8007aa0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff fe2e 	bl	8007ac6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007e6a:	f107 0308 	add.w	r3, r7, #8
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fa36 	bl	80072e0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a14      	ldr	r2, [pc, #80]	; (8007ec8 <LL_USART_Init+0xbc>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d102      	bne.n	8007e82 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	e00c      	b.n	8007e9c <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a11      	ldr	r2, [pc, #68]	; (8007ecc <LL_USART_Init+0xc0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d102      	bne.n	8007e90 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	e005      	b.n	8007e9c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a0f      	ldr	r2, [pc, #60]	; (8007ed0 <LL_USART_Init+0xc4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d101      	bne.n	8007e9c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00d      	beq.n	8007ebe <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d009      	beq.n	8007ebe <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69b9      	ldr	r1, [r7, #24]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff fe17 	bl	8007aec <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007ebe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3720      	adds	r7, #32
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	40011000 	.word	0x40011000
 8007ecc:	40004400 	.word	0x40004400
 8007ed0:	40011400 	.word	0x40011400

08007ed4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8007edc:	4a04      	ldr	r2, [pc, #16]	; (8007ef0 <LL_SetSystemCoreClock+0x1c>)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6013      	str	r3, [r2, #0]
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	20000000 	.word	0x20000000

08007ef4 <__libc_init_array>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4d0d      	ldr	r5, [pc, #52]	; (8007f2c <__libc_init_array+0x38>)
 8007ef8:	4c0d      	ldr	r4, [pc, #52]	; (8007f30 <__libc_init_array+0x3c>)
 8007efa:	1b64      	subs	r4, r4, r5
 8007efc:	10a4      	asrs	r4, r4, #2
 8007efe:	2600      	movs	r6, #0
 8007f00:	42a6      	cmp	r6, r4
 8007f02:	d109      	bne.n	8007f18 <__libc_init_array+0x24>
 8007f04:	4d0b      	ldr	r5, [pc, #44]	; (8007f34 <__libc_init_array+0x40>)
 8007f06:	4c0c      	ldr	r4, [pc, #48]	; (8007f38 <__libc_init_array+0x44>)
 8007f08:	f000 f820 	bl	8007f4c <_init>
 8007f0c:	1b64      	subs	r4, r4, r5
 8007f0e:	10a4      	asrs	r4, r4, #2
 8007f10:	2600      	movs	r6, #0
 8007f12:	42a6      	cmp	r6, r4
 8007f14:	d105      	bne.n	8007f22 <__libc_init_array+0x2e>
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f1c:	4798      	blx	r3
 8007f1e:	3601      	adds	r6, #1
 8007f20:	e7ee      	b.n	8007f00 <__libc_init_array+0xc>
 8007f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f26:	4798      	blx	r3
 8007f28:	3601      	adds	r6, #1
 8007f2a:	e7f2      	b.n	8007f12 <__libc_init_array+0x1e>
 8007f2c:	08007f9c 	.word	0x08007f9c
 8007f30:	08007f9c 	.word	0x08007f9c
 8007f34:	08007f9c 	.word	0x08007f9c
 8007f38:	08007fa0 	.word	0x08007fa0

08007f3c <memset>:
 8007f3c:	4402      	add	r2, r0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d100      	bne.n	8007f46 <memset+0xa>
 8007f44:	4770      	bx	lr
 8007f46:	f803 1b01 	strb.w	r1, [r3], #1
 8007f4a:	e7f9      	b.n	8007f40 <memset+0x4>

08007f4c <_init>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr

08007f58 <_fini>:
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	bf00      	nop
 8007f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5e:	bc08      	pop	{r3}
 8007f60:	469e      	mov	lr, r3
 8007f62:	4770      	bx	lr
